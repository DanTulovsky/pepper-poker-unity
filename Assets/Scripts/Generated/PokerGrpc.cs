// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: poker.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Poker {
  public static partial class PokerServer
  {
    static readonly string __ServiceName = "poker.PokerServer";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Poker.AckTokenRequest> __Marshaller_poker_AckTokenRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Poker.AckTokenRequest.Parser));
    static readonly grpc::Marshaller<global::Poker.AckTokenResponse> __Marshaller_poker_AckTokenResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Poker.AckTokenResponse.Parser));
    static readonly grpc::Marshaller<global::Poker.JoinTableRequest> __Marshaller_poker_JoinTableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Poker.JoinTableRequest.Parser));
    static readonly grpc::Marshaller<global::Poker.JoinTableResponse> __Marshaller_poker_JoinTableResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Poker.JoinTableResponse.Parser));
    static readonly grpc::Marshaller<global::Poker.PlayRequest> __Marshaller_poker_PlayRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Poker.PlayRequest.Parser));
    static readonly grpc::Marshaller<global::Poker.GameData> __Marshaller_poker_GameData = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Poker.GameData.Parser));
    static readonly grpc::Marshaller<global::Poker.RegisterRequest> __Marshaller_poker_RegisterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Poker.RegisterRequest.Parser));
    static readonly grpc::Marshaller<global::Poker.RegisterResponse> __Marshaller_poker_RegisterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Poker.RegisterResponse.Parser));
    static readonly grpc::Marshaller<global::Poker.TakeTurnRequest> __Marshaller_poker_TakeTurnRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Poker.TakeTurnRequest.Parser));
    static readonly grpc::Marshaller<global::Poker.TakeTurnResponse> __Marshaller_poker_TakeTurnResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Poker.TakeTurnResponse.Parser));

    static readonly grpc::Method<global::Poker.AckTokenRequest, global::Poker.AckTokenResponse> __Method_AckToken = new grpc::Method<global::Poker.AckTokenRequest, global::Poker.AckTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AckToken",
        __Marshaller_poker_AckTokenRequest,
        __Marshaller_poker_AckTokenResponse);

    static readonly grpc::Method<global::Poker.JoinTableRequest, global::Poker.JoinTableResponse> __Method_JoinTable = new grpc::Method<global::Poker.JoinTableRequest, global::Poker.JoinTableResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "JoinTable",
        __Marshaller_poker_JoinTableRequest,
        __Marshaller_poker_JoinTableResponse);

    static readonly grpc::Method<global::Poker.PlayRequest, global::Poker.GameData> __Method_Play = new grpc::Method<global::Poker.PlayRequest, global::Poker.GameData>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Play",
        __Marshaller_poker_PlayRequest,
        __Marshaller_poker_GameData);

    static readonly grpc::Method<global::Poker.RegisterRequest, global::Poker.RegisterResponse> __Method_Register = new grpc::Method<global::Poker.RegisterRequest, global::Poker.RegisterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Register",
        __Marshaller_poker_RegisterRequest,
        __Marshaller_poker_RegisterResponse);

    static readonly grpc::Method<global::Poker.TakeTurnRequest, global::Poker.TakeTurnResponse> __Method_TakeTurn = new grpc::Method<global::Poker.TakeTurnRequest, global::Poker.TakeTurnResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TakeTurn",
        __Marshaller_poker_TakeTurnRequest,
        __Marshaller_poker_TakeTurnResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Poker.PokerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PokerServer</summary>
    [grpc::BindServiceMethod(typeof(PokerServer), "BindService")]
    public abstract partial class PokerServerBase
    {
      /// <summary>
      /// AckToken acks an ack token
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Poker.AckTokenResponse> AckToken(global::Poker.AckTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// JoinTable joins a table once authenticated
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Poker.JoinTableResponse> JoinTable(global::Poker.JoinTableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Play subscribes the client to updates after joining a table
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Play(global::Poker.PlayRequest request, grpc::IServerStreamWriter<global::Poker.GameData> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Register registers with the server
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Poker.RegisterResponse> Register(global::Poker.RegisterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// TakeTurn sends a Poker game turn request
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Poker.TakeTurnResponse> TakeTurn(global::Poker.TakeTurnRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PokerServer</summary>
    public partial class PokerServerClient : grpc::ClientBase<PokerServerClient>
    {
      /// <summary>Creates a new client for PokerServer</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PokerServerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PokerServer that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PokerServerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PokerServerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PokerServerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// AckToken acks an ack token
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Poker.AckTokenResponse AckToken(global::Poker.AckTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AckToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AckToken acks an ack token
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Poker.AckTokenResponse AckToken(global::Poker.AckTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AckToken, null, options, request);
      }
      /// <summary>
      /// AckToken acks an ack token
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Poker.AckTokenResponse> AckTokenAsync(global::Poker.AckTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AckTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AckToken acks an ack token
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Poker.AckTokenResponse> AckTokenAsync(global::Poker.AckTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AckToken, null, options, request);
      }
      /// <summary>
      /// JoinTable joins a table once authenticated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Poker.JoinTableResponse JoinTable(global::Poker.JoinTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// JoinTable joins a table once authenticated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Poker.JoinTableResponse JoinTable(global::Poker.JoinTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_JoinTable, null, options, request);
      }
      /// <summary>
      /// JoinTable joins a table once authenticated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Poker.JoinTableResponse> JoinTableAsync(global::Poker.JoinTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// JoinTable joins a table once authenticated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Poker.JoinTableResponse> JoinTableAsync(global::Poker.JoinTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_JoinTable, null, options, request);
      }
      /// <summary>
      /// Play subscribes the client to updates after joining a table
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Poker.GameData> Play(global::Poker.PlayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Play(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Play subscribes the client to updates after joining a table
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Poker.GameData> Play(global::Poker.PlayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Play, null, options, request);
      }
      /// <summary>
      /// Register registers with the server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Poker.RegisterResponse Register(global::Poker.RegisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Register(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Register registers with the server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Poker.RegisterResponse Register(global::Poker.RegisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Register, null, options, request);
      }
      /// <summary>
      /// Register registers with the server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Poker.RegisterResponse> RegisterAsync(global::Poker.RegisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Register registers with the server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Poker.RegisterResponse> RegisterAsync(global::Poker.RegisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Register, null, options, request);
      }
      /// <summary>
      /// TakeTurn sends a Poker game turn request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Poker.TakeTurnResponse TakeTurn(global::Poker.TakeTurnRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TakeTurn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TakeTurn sends a Poker game turn request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Poker.TakeTurnResponse TakeTurn(global::Poker.TakeTurnRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TakeTurn, null, options, request);
      }
      /// <summary>
      /// TakeTurn sends a Poker game turn request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Poker.TakeTurnResponse> TakeTurnAsync(global::Poker.TakeTurnRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TakeTurnAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TakeTurn sends a Poker game turn request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Poker.TakeTurnResponse> TakeTurnAsync(global::Poker.TakeTurnRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TakeTurn, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PokerServerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PokerServerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PokerServerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AckToken, serviceImpl.AckToken)
          .AddMethod(__Method_JoinTable, serviceImpl.JoinTable)
          .AddMethod(__Method_Play, serviceImpl.Play)
          .AddMethod(__Method_Register, serviceImpl.Register)
          .AddMethod(__Method_TakeTurn, serviceImpl.TakeTurn).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PokerServerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AckToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Poker.AckTokenRequest, global::Poker.AckTokenResponse>(serviceImpl.AckToken));
      serviceBinder.AddMethod(__Method_JoinTable, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Poker.JoinTableRequest, global::Poker.JoinTableResponse>(serviceImpl.JoinTable));
      serviceBinder.AddMethod(__Method_Play, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Poker.PlayRequest, global::Poker.GameData>(serviceImpl.Play));
      serviceBinder.AddMethod(__Method_Register, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Poker.RegisterRequest, global::Poker.RegisterResponse>(serviceImpl.Register));
      serviceBinder.AddMethod(__Method_TakeTurn, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Poker.TakeTurnRequest, global::Poker.TakeTurnResponse>(serviceImpl.TakeTurn));
    }

  }
}
#endregion

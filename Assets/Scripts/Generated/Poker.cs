// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: poker.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Poker {

  /// <summary>Holder for reflection information generated from poker.proto</summary>
  public static partial class PokerReflection {

    #region Descriptor
    /// <summary>File descriptor for poker.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PokerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgtwb2tlci5wcm90bxIFcG9rZXIiHwoPU2F5SGVsbG9SZXF1ZXN0EgwKBG5h",
            "bWUYCiABKAkiJAoQU2F5SGVsbG9SZXNwb25zZRIQCghwbGF5ZXJJRBgKIAEo",
            "CSI1ChBKb2luVGFibGVSZXF1ZXN0Eg8KB3RhYmxlSUQYCiABKAkSEAoIcGxh",
            "eWVySUQYFCABKAkiXQoRSm9pblRhYmxlUmVzcG9uc2USJgoGc3RhdHVzGBQg",
            "ASgOMhYucG9rZXIuSm9pblRhYmxlU3RhdHVzEg8KB3RhYmxlSUQYHiABKAkS",
            "DwoHcm91bmRJRBgoIAEoCSI8CgpBY3Rpb25PcHRzEhEKCWJldEFtb3VudBgK",
            "IAEoAxIMCgRuYW1lGBQgASgJEg0KBXRva2VuGB4gASgJIokBChNQbGF5ZXJB",
            "Y3Rpb25SZXF1ZXN0EhAKCHBsYXllcklEGAogASgJEg8KB3RhYmxlSUQYFCAB",
            "KAkSDwoHcm91bmRJRBgeIAEoCRIdCgZhY3Rpb24YKCABKA4yDS5wb2tlci5B",
            "Y3Rpb24SHwoEb3B0cxgyIAEoCzIRLnBva2VyLkFjdGlvbk9wdHMiFgoUUGxh",
            "eWVyQWN0aW9uUmVzcG9uc2UiRQoEQ2FyZBIeCgVzdWl0ZRgKIAEoDjIPLnBv",
            "a2VyLkNhcmRTdWl0Eh0KBHJhbmsYFCABKA4yDy5wb2tlci5DYXJkUmFuayKN",
            "AQoLUGxheWVyTW9uZXkSDAoEYmFuaxgKIAEoAxINCgVzdGFjaxgUIAEoAxIL",
            "CgNwb3QYHiABKAMSFwoPbWluQmV0VGhpc1JvdW5kGCggASgDEhQKDGJldFRo",
            "aXNSb3VuZBgyIAEoAxITCgtiZXRUaGlzSGFuZBg8IAEoAxIQCgh3aW5uaW5n",
            "cxhGIAEoAyK/AQoGUGxheWVyEgwKBG5hbWUYCiABKAkSCgoCaWQYDyABKAkS",
            "EAoIcG9zaXRpb24YFCABKAMSIQoFbW9uZXkYHiABKAsyEi5wb2tlci5QbGF5",
            "ZXJNb25leRIhCgVzdGF0ZRgyIAEoDjISLnBva2VyLlBsYXllclN0YXRlEhkK",
            "BGNhcmQYPCADKAsyCy5wb2tlci5DYXJkEhkKBGhhbmQYRiADKAsyCy5wb2tl",
            "ci5DYXJkEg0KBWNvbWJvGFAgASgJIisKDkNvbW11bml0eUNhcmRzEhkKBGNh",
            "cmQYCiADKAsyCy5wb2tlci5DYXJkIokDCglUYWJsZUluZm8SHQoGcGxheWVy",
            "GAogAygLMg0ucG9rZXIuUGxheWVyEiEKCm5leHRQbGF5ZXIYFCABKAsyDS5w",
            "b2tlci5QbGF5ZXISGwoTdHVyblRpbWVMZWZ0U2Vjb25kcxgZIAEoAxIeCgd3",
            "aW5uZXJzGB4gAygLMg0ucG9rZXIuUGxheWVyEi4KD2NvbW11bml0eV9jYXJk",
            "cxgyIAEoCzIVLnBva2VyLkNvbW11bml0eUNhcmRzEicKC3RhYmxlU3RhdHVz",
            "GDwgASgOMhIucG9rZXIuVGFibGVTdGF0dXMSJwoLcm91bmRTdGF0dXMYRiAB",
            "KA4yEi5wb2tlci5Sb3VuZFN0YXR1cxIPCgd0YWJsZUlEGFAgASgJEg8KB3Jv",
            "dW5kSUQYWiABKAkSEgoKc21hbGxCbGluZBhkIAEoAxIQCghiaWdCbGluZBhu",
            "IAEoAxINCgV0b2tlbhh4IAEoCRISCglzdGFydFRpbWUYggEgASgDEhAKB2Vu",
            "ZFRpbWUYjAEgASgDIkQKDkdldEluZm9SZXF1ZXN0Eg8KB3RhYmxlSUQYCiAB",
            "KAkSDwoHcm91bmRJRBgUIAEoCRIQCghwbGF5ZXJJRBgeIAEoCSIxCg9HZXRJ",
            "bmZvUmVzcG9uc2USHgoEaW5mbxgKIAEoCzIQLnBva2VyLlRhYmxlSW5mbypP",
            "Cg9Kb2luVGFibGVTdGF0dXMSCwoHVU5LTk9XThAAEgsKB1NVQ0NFU1MQARIX",
            "ChNOT19BVkFJTEFCTEVfVEFCTEVTEAISCQoFRVJST1IQAyqkAQoGQWN0aW9u",
            "Eg4KCkFjdGlvbkZvbGQQABIPCgtBY3Rpb25DaGVjaxABEg0KCUFjdGlvbkJl",
            "dBACEg8KC0FjdGlvbkFsbEluEAMSDgoKQWN0aW9uQ2FsbBAEEhIKDkFjdGlv",
            "blNheUhlbGxvEAUSEwoPQWN0aW9uSm9pblRhYmxlEAYSEQoNQWN0aW9uR2V0",
            "SW5mbxAHEg0KCUFjdGlvbkFjaxAIKjcKCENhcmRTdWl0EgkKBVNwYWRlEAAS",
            "CAoEQ2x1YhABEgsKB0RpYW1vbmQQAhIJCgVIZWFydBADKowBCghDYXJkUmFu",
            "axIHCgNUd28QABIJCgVUaHJlZRABEggKBEZvdXIQAhIICgRGaXZlEAMSBwoD",
            "U2l4EAQSCQoFU2V2ZW4QBRIJCgVFaWdodBAGEggKBE5pbmUQBxIHCgNUZW4Q",
            "CBIICgRKYWNrEAkSCQoFUXVlZW4QChIICgRLaW5nEAsSBwoDQWNlEAwqagoL",
            "UGxheWVyU3RhdGUSFgoSUGxheWVyU3RhdGVVbmtub3duEAASFAoQUGxheWVy",
            "U3RhdGVSZWFkeRABEhYKElBsYXllclN0YXRlUGxheWluZxACEhUKEVBsYXll",
            "clN0YXRlRm9sZGVkEAMquwEKC1RhYmxlU3RhdHVzEhYKElRhYmxlU3RhdHVz",
            "VW5rbm93bhAAEhsKF1RhYmxlU3RhdHVzSW5pdGlhbGl6aW5nEAESHQoZVGFi",
            "bGVTdGF0dXNXYWl0aW5nUGxheWVycxACEh8KG1RhYmxlU3RhdHVzR2FtZVJl",
            "YWR5VG9TdGFydBADEhoKFlRhYmxlU3RhdHVzR2FtZVBsYXlpbmcQBBIbChdU",
            "YWJsZVN0YXR1c0dhbWVGaW5pc2hlZBAFKssBCgtSb3VuZFN0YXR1cxIbChdS",
            "b3VuZFN0YXR1c0luaXRpYWxpemluZxAAEhkKFVJvdW5kU3RhdHVzU21hbGxC",
            "bGluZBABEhcKE1JvdW5kU3RhdHVzQmlnQmxpbmQQAhIWChJSb3VuZFN0YXR1",
            "c1ByZUZsb3AQAxITCg9Sb3VuZFN0YXR1c0Zsb3AQBBITCg9Sb3VuZFN0YXR1",
            "c1R1cm4QBRIUChBSb3VuZFN0YXR1c1JpdmVyEAYSEwoPUm91bmRTdGF0dXNE",
            "b25lEAcykwIKC1Bva2VyU2VydmVyEj0KCFNheUhlbGxvEhYucG9rZXIuU2F5",
            "SGVsbG9SZXF1ZXN0GhcucG9rZXIuU2F5SGVsbG9SZXNwb25zZSIAEkAKCUpv",
            "aW5UYWJsZRIXLnBva2VyLkpvaW5UYWJsZVJlcXVlc3QaGC5wb2tlci5Kb2lu",
            "VGFibGVSZXNwb25zZSIAEkUKCFRha2VUdXJuEhoucG9rZXIuUGxheWVyQWN0",
            "aW9uUmVxdWVzdBobLnBva2VyLlBsYXllckFjdGlvblJlc3BvbnNlIgASPAoL",
            "R2V0R2FtZUluZm8SFS5wb2tlci5HZXRJbmZvUmVxdWVzdBoQLnBva2VyLlRh",
            "YmxlSW5mbyIAKAEwAUIqWihnaXRodWIuY29tL0RhblR1b3Zza3kvcGVwcGVy",
            "LXBva2VyL3Byb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Poker.JoinTableStatus), typeof(global::Poker.Action), typeof(global::Poker.CardSuit), typeof(global::Poker.CardRank), typeof(global::Poker.PlayerState), typeof(global::Poker.TableStatus), typeof(global::Poker.RoundStatus), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.SayHelloRequest), global::Poker.SayHelloRequest.Parser, new[]{ "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.SayHelloResponse), global::Poker.SayHelloResponse.Parser, new[]{ "PlayerID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.JoinTableRequest), global::Poker.JoinTableRequest.Parser, new[]{ "TableID", "PlayerID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.JoinTableResponse), global::Poker.JoinTableResponse.Parser, new[]{ "Status", "TableID", "RoundID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.ActionOpts), global::Poker.ActionOpts.Parser, new[]{ "BetAmount", "Name", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.PlayerActionRequest), global::Poker.PlayerActionRequest.Parser, new[]{ "PlayerID", "TableID", "RoundID", "Action", "Opts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.PlayerActionResponse), global::Poker.PlayerActionResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.Card), global::Poker.Card.Parser, new[]{ "Suite", "Rank" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.PlayerMoney), global::Poker.PlayerMoney.Parser, new[]{ "Bank", "Stack", "Pot", "MinBetThisRound", "BetThisRound", "BetThisHand", "Winnings" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.Player), global::Poker.Player.Parser, new[]{ "Name", "Id", "Position", "Money", "State", "Card", "Hand", "Combo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.CommunityCards), global::Poker.CommunityCards.Parser, new[]{ "Card" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.TableInfo), global::Poker.TableInfo.Parser, new[]{ "Player", "NextPlayer", "TurnTimeLeftSeconds", "Winners", "CommunityCards", "TableStatus", "RoundStatus", "TableID", "RoundID", "SmallBlind", "BigBlind", "Token", "StartTime", "EndTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.GetInfoRequest), global::Poker.GetInfoRequest.Parser, new[]{ "TableID", "RoundID", "PlayerID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.GetInfoResponse), global::Poker.GetInfoResponse.Parser, new[]{ "Info" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum JoinTableStatus {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("SUCCESS")] Success = 1,
    [pbr::OriginalName("NO_AVAILABLE_TABLES")] NoAvailableTables = 2,
    [pbr::OriginalName("ERROR")] Error = 3,
  }

  public enum Action {
    [pbr::OriginalName("ActionFold")] Fold = 0,
    [pbr::OriginalName("ActionCheck")] Check = 1,
    [pbr::OriginalName("ActionBet")] Bet = 2,
    [pbr::OriginalName("ActionAllIn")] AllIn = 3,
    [pbr::OriginalName("ActionCall")] Call = 4,
    [pbr::OriginalName("ActionSayHello")] SayHello = 5,
    [pbr::OriginalName("ActionJoinTable")] JoinTable = 6,
    [pbr::OriginalName("ActionGetInfo")] GetInfo = 7,
    [pbr::OriginalName("ActionAck")] Ack = 8,
  }

  public enum CardSuit {
    [pbr::OriginalName("Spade")] Spade = 0,
    [pbr::OriginalName("Club")] Club = 1,
    [pbr::OriginalName("Diamond")] Diamond = 2,
    [pbr::OriginalName("Heart")] Heart = 3,
  }

  public enum CardRank {
    [pbr::OriginalName("Two")] Two = 0,
    [pbr::OriginalName("Three")] Three = 1,
    [pbr::OriginalName("Four")] Four = 2,
    [pbr::OriginalName("Five")] Five = 3,
    [pbr::OriginalName("Six")] Six = 4,
    [pbr::OriginalName("Seven")] Seven = 5,
    [pbr::OriginalName("Eight")] Eight = 6,
    [pbr::OriginalName("Nine")] Nine = 7,
    [pbr::OriginalName("Ten")] Ten = 8,
    [pbr::OriginalName("Jack")] Jack = 9,
    [pbr::OriginalName("Queen")] Queen = 10,
    [pbr::OriginalName("King")] King = 11,
    [pbr::OriginalName("Ace")] Ace = 12,
  }

  public enum PlayerState {
    [pbr::OriginalName("PlayerStateUnknown")] Unknown = 0,
    [pbr::OriginalName("PlayerStateReady")] Ready = 1,
    [pbr::OriginalName("PlayerStatePlaying")] Playing = 2,
    [pbr::OriginalName("PlayerStateFolded")] Folded = 3,
  }

  public enum TableStatus {
    [pbr::OriginalName("TableStatusUnknown")] Unknown = 0,
    [pbr::OriginalName("TableStatusInitializing")] Initializing = 1,
    [pbr::OriginalName("TableStatusWaitingPlayers")] WaitingPlayers = 2,
    [pbr::OriginalName("TableStatusGameReadyToStart")] GameReadyToStart = 3,
    [pbr::OriginalName("TableStatusGamePlaying")] GamePlaying = 4,
    [pbr::OriginalName("TableStatusGameFinished")] GameFinished = 5,
  }

  public enum RoundStatus {
    [pbr::OriginalName("RoundStatusInitializing")] Initializing = 0,
    [pbr::OriginalName("RoundStatusSmallBlind")] SmallBlind = 1,
    [pbr::OriginalName("RoundStatusBigBlind")] BigBlind = 2,
    [pbr::OriginalName("RoundStatusPreFlop")] PreFlop = 3,
    [pbr::OriginalName("RoundStatusFlop")] Flop = 4,
    [pbr::OriginalName("RoundStatusTurn")] Turn = 5,
    [pbr::OriginalName("RoundStatusRiver")] River = 6,
    [pbr::OriginalName("RoundStatusDone")] Done = 7,
  }

  #endregion

  #region Messages
  public sealed partial class SayHelloRequest : pb::IMessage<SayHelloRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SayHelloRequest> _parser = new pb::MessageParser<SayHelloRequest>(() => new SayHelloRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SayHelloRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SayHelloRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SayHelloRequest(SayHelloRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SayHelloRequest Clone() {
      return new SayHelloRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 10;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SayHelloRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SayHelloRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SayHelloRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SayHelloResponse : pb::IMessage<SayHelloResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SayHelloResponse> _parser = new pb::MessageParser<SayHelloResponse>(() => new SayHelloResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SayHelloResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SayHelloResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SayHelloResponse(SayHelloResponse other) : this() {
      playerID_ = other.playerID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SayHelloResponse Clone() {
      return new SayHelloResponse(this);
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 10;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SayHelloResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SayHelloResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PlayerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PlayerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SayHelloResponse other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            PlayerID = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            PlayerID = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JoinTableRequest : pb::IMessage<JoinTableRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JoinTableRequest> _parser = new pb::MessageParser<JoinTableRequest>(() => new JoinTableRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinTableRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTableRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTableRequest(JoinTableRequest other) : this() {
      tableID_ = other.tableID_;
      playerID_ = other.playerID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTableRequest Clone() {
      return new JoinTableRequest(this);
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 10;
    private string tableID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableID {
      get { return tableID_; }
      set {
        tableID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 20;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinTableRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinTableRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableID != other.TableID) return false;
      if (PlayerID != other.PlayerID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableID.Length != 0) hash ^= TableID.GetHashCode();
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TableID);
      }
      if (PlayerID.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(PlayerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TableID);
      }
      if (PlayerID.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(PlayerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableID);
      }
      if (PlayerID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinTableRequest other) {
      if (other == null) {
        return;
      }
      if (other.TableID.Length != 0) {
        TableID = other.TableID;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            TableID = input.ReadString();
            break;
          }
          case 162: {
            PlayerID = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            TableID = input.ReadString();
            break;
          }
          case 162: {
            PlayerID = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JoinTableResponse : pb::IMessage<JoinTableResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JoinTableResponse> _parser = new pb::MessageParser<JoinTableResponse>(() => new JoinTableResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinTableResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTableResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTableResponse(JoinTableResponse other) : this() {
      status_ = other.status_;
      tableID_ = other.tableID_;
      roundID_ = other.roundID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTableResponse Clone() {
      return new JoinTableResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 20;
    private global::Poker.JoinTableStatus status_ = global::Poker.JoinTableStatus.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.JoinTableStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 30;
    private string tableID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableID {
      get { return tableID_; }
      set {
        tableID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roundID" field.</summary>
    public const int RoundIDFieldNumber = 40;
    private string roundID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoundID {
      get { return roundID_; }
      set {
        roundID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinTableResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinTableResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (TableID != other.TableID) return false;
      if (RoundID != other.RoundID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != global::Poker.JoinTableStatus.Unknown) hash ^= Status.GetHashCode();
      if (TableID.Length != 0) hash ^= TableID.GetHashCode();
      if (RoundID.Length != 0) hash ^= RoundID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Status != global::Poker.JoinTableStatus.Unknown) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) Status);
      }
      if (TableID.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(TableID);
      }
      if (RoundID.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(RoundID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Status != global::Poker.JoinTableStatus.Unknown) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) Status);
      }
      if (TableID.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(TableID);
      }
      if (RoundID.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(RoundID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != global::Poker.JoinTableStatus.Unknown) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (TableID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TableID);
      }
      if (RoundID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RoundID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinTableResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != global::Poker.JoinTableStatus.Unknown) {
        Status = other.Status;
      }
      if (other.TableID.Length != 0) {
        TableID = other.TableID;
      }
      if (other.RoundID.Length != 0) {
        RoundID = other.RoundID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 160: {
            Status = (global::Poker.JoinTableStatus) input.ReadEnum();
            break;
          }
          case 242: {
            TableID = input.ReadString();
            break;
          }
          case 322: {
            RoundID = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 160: {
            Status = (global::Poker.JoinTableStatus) input.ReadEnum();
            break;
          }
          case 242: {
            TableID = input.ReadString();
            break;
          }
          case 322: {
            RoundID = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ActionOpts : pb::IMessage<ActionOpts>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionOpts> _parser = new pb::MessageParser<ActionOpts>(() => new ActionOpts());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionOpts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOpts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOpts(ActionOpts other) : this() {
      betAmount_ = other.betAmount_;
      name_ = other.name_;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOpts Clone() {
      return new ActionOpts(this);
    }

    /// <summary>Field number for the "betAmount" field.</summary>
    public const int BetAmountFieldNumber = 10;
    private long betAmount_;
    /// <summary>
    /// Bet options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BetAmount {
      get { return betAmount_; }
      set {
        betAmount_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 20;
    private string name_ = "";
    /// <summary>
    /// SayHello options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 30;
    private string token_ = "";
    /// <summary>
    /// Ack options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionOpts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionOpts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BetAmount != other.BetAmount) return false;
      if (Name != other.Name) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BetAmount != 0L) hash ^= BetAmount.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BetAmount != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(BetAmount);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Name);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BetAmount != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(BetAmount);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Name);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BetAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BetAmount);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Token.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionOpts other) {
      if (other == null) {
        return;
      }
      if (other.BetAmount != 0L) {
        BetAmount = other.BetAmount;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 80: {
            BetAmount = input.ReadInt64();
            break;
          }
          case 162: {
            Name = input.ReadString();
            break;
          }
          case 242: {
            Token = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 80: {
            BetAmount = input.ReadInt64();
            break;
          }
          case 162: {
            Name = input.ReadString();
            break;
          }
          case 242: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerActionRequest : pb::IMessage<PlayerActionRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerActionRequest> _parser = new pb::MessageParser<PlayerActionRequest>(() => new PlayerActionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionRequest(PlayerActionRequest other) : this() {
      playerID_ = other.playerID_;
      tableID_ = other.tableID_;
      roundID_ = other.roundID_;
      action_ = other.action_;
      opts_ = other.opts_ != null ? other.opts_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionRequest Clone() {
      return new PlayerActionRequest(this);
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 10;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 20;
    private string tableID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableID {
      get { return tableID_; }
      set {
        tableID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roundID" field.</summary>
    public const int RoundIDFieldNumber = 30;
    private string roundID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoundID {
      get { return roundID_; }
      set {
        roundID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 40;
    private global::Poker.Action action_ = global::Poker.Action.Fold;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.Action Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "opts" field.</summary>
    public const int OptsFieldNumber = 50;
    private global::Poker.ActionOpts opts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.ActionOpts Opts {
      get { return opts_; }
      set {
        opts_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (TableID != other.TableID) return false;
      if (RoundID != other.RoundID) return false;
      if (Action != other.Action) return false;
      if (!object.Equals(Opts, other.Opts)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (TableID.Length != 0) hash ^= TableID.GetHashCode();
      if (RoundID.Length != 0) hash ^= RoundID.GetHashCode();
      if (Action != global::Poker.Action.Fold) hash ^= Action.GetHashCode();
      if (opts_ != null) hash ^= Opts.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PlayerID);
      }
      if (TableID.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(TableID);
      }
      if (RoundID.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(RoundID);
      }
      if (Action != global::Poker.Action.Fold) {
        output.WriteRawTag(192, 2);
        output.WriteEnum((int) Action);
      }
      if (opts_ != null) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(Opts);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PlayerID);
      }
      if (TableID.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(TableID);
      }
      if (RoundID.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(RoundID);
      }
      if (Action != global::Poker.Action.Fold) {
        output.WriteRawTag(192, 2);
        output.WriteEnum((int) Action);
      }
      if (opts_ != null) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(Opts);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (TableID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TableID);
      }
      if (RoundID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RoundID);
      }
      if (Action != global::Poker.Action.Fold) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (opts_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Opts);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.TableID.Length != 0) {
        TableID = other.TableID;
      }
      if (other.RoundID.Length != 0) {
        RoundID = other.RoundID;
      }
      if (other.Action != global::Poker.Action.Fold) {
        Action = other.Action;
      }
      if (other.opts_ != null) {
        if (opts_ == null) {
          Opts = new global::Poker.ActionOpts();
        }
        Opts.MergeFrom(other.Opts);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            PlayerID = input.ReadString();
            break;
          }
          case 162: {
            TableID = input.ReadString();
            break;
          }
          case 242: {
            RoundID = input.ReadString();
            break;
          }
          case 320: {
            Action = (global::Poker.Action) input.ReadEnum();
            break;
          }
          case 402: {
            if (opts_ == null) {
              Opts = new global::Poker.ActionOpts();
            }
            input.ReadMessage(Opts);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            PlayerID = input.ReadString();
            break;
          }
          case 162: {
            TableID = input.ReadString();
            break;
          }
          case 242: {
            RoundID = input.ReadString();
            break;
          }
          case 320: {
            Action = (global::Poker.Action) input.ReadEnum();
            break;
          }
          case 402: {
            if (opts_ == null) {
              Opts = new global::Poker.ActionOpts();
            }
            input.ReadMessage(Opts);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerActionResponse : pb::IMessage<PlayerActionResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerActionResponse> _parser = new pb::MessageParser<PlayerActionResponse>(() => new PlayerActionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerActionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionResponse(PlayerActionResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerActionResponse Clone() {
      return new PlayerActionResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerActionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerActionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerActionResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class Card : pb::IMessage<Card>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card(Card other) : this() {
      suite_ = other.suite_;
      rank_ = other.rank_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card Clone() {
      return new Card(this);
    }

    /// <summary>Field number for the "suite" field.</summary>
    public const int SuiteFieldNumber = 10;
    private global::Poker.CardSuit suite_ = global::Poker.CardSuit.Spade;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.CardSuit Suite {
      get { return suite_; }
      set {
        suite_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 20;
    private global::Poker.CardRank rank_ = global::Poker.CardRank.Two;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.CardRank Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Card);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Card other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Suite != other.Suite) return false;
      if (Rank != other.Rank) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Suite != global::Poker.CardSuit.Spade) hash ^= Suite.GetHashCode();
      if (Rank != global::Poker.CardRank.Two) hash ^= Rank.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Suite != global::Poker.CardSuit.Spade) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Suite);
      }
      if (Rank != global::Poker.CardRank.Two) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) Rank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Suite != global::Poker.CardSuit.Spade) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Suite);
      }
      if (Rank != global::Poker.CardRank.Two) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) Rank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Suite != global::Poker.CardSuit.Spade) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Suite);
      }
      if (Rank != global::Poker.CardRank.Two) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Rank);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Card other) {
      if (other == null) {
        return;
      }
      if (other.Suite != global::Poker.CardSuit.Spade) {
        Suite = other.Suite;
      }
      if (other.Rank != global::Poker.CardRank.Two) {
        Rank = other.Rank;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 80: {
            Suite = (global::Poker.CardSuit) input.ReadEnum();
            break;
          }
          case 160: {
            Rank = (global::Poker.CardRank) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 80: {
            Suite = (global::Poker.CardSuit) input.ReadEnum();
            break;
          }
          case 160: {
            Rank = (global::Poker.CardRank) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerMoney : pb::IMessage<PlayerMoney>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerMoney> _parser = new pb::MessageParser<PlayerMoney>(() => new PlayerMoney());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerMoney> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMoney() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMoney(PlayerMoney other) : this() {
      bank_ = other.bank_;
      stack_ = other.stack_;
      pot_ = other.pot_;
      minBetThisRound_ = other.minBetThisRound_;
      betThisRound_ = other.betThisRound_;
      betThisHand_ = other.betThisHand_;
      winnings_ = other.winnings_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMoney Clone() {
      return new PlayerMoney(this);
    }

    /// <summary>Field number for the "bank" field.</summary>
    public const int BankFieldNumber = 10;
    private long bank_;
    /// <summary>
    /// money player has in the bank, excluding what they're currently playing with
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Bank {
      get { return bank_; }
      set {
        bank_ = value;
      }
    }

    /// <summary>Field number for the "stack" field.</summary>
    public const int StackFieldNumber = 20;
    private long stack_;
    /// <summary>
    /// money in the stack the player is playing with at their table
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Stack {
      get { return stack_; }
      set {
        stack_ = value;
      }
    }

    /// <summary>Field number for the "pot" field.</summary>
    public const int PotFieldNumber = 30;
    private long pot_;
    /// <summary>
    /// total pot size so far in the hand
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Pot {
      get { return pot_; }
      set {
        pot_ = value;
      }
    }

    /// <summary>Field number for the "minBetThisRound" field.</summary>
    public const int MinBetThisRoundFieldNumber = 40;
    private long minBetThisRound_;
    /// <summary>
    /// current minimum bet this betting round
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinBetThisRound {
      get { return minBetThisRound_; }
      set {
        minBetThisRound_ = value;
      }
    }

    /// <summary>Field number for the "betThisRound" field.</summary>
    public const int BetThisRoundFieldNumber = 50;
    private long betThisRound_;
    /// <summary>
    /// money bet by the player in the betting round so far
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BetThisRound {
      get { return betThisRound_; }
      set {
        betThisRound_ = value;
      }
    }

    /// <summary>Field number for the "betThisHand" field.</summary>
    public const int BetThisHandFieldNumber = 60;
    private long betThisHand_;
    /// <summary>
    /// total money bet by the player in the hand so far
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BetThisHand {
      get { return betThisHand_; }
      set {
        betThisHand_ = value;
      }
    }

    /// <summary>Field number for the "winnings" field.</summary>
    public const int WinningsFieldNumber = 70;
    private long winnings_;
    /// <summary>
    /// total money won by this player in the hand
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Winnings {
      get { return winnings_; }
      set {
        winnings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerMoney);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerMoney other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Bank != other.Bank) return false;
      if (Stack != other.Stack) return false;
      if (Pot != other.Pot) return false;
      if (MinBetThisRound != other.MinBetThisRound) return false;
      if (BetThisRound != other.BetThisRound) return false;
      if (BetThisHand != other.BetThisHand) return false;
      if (Winnings != other.Winnings) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Bank != 0L) hash ^= Bank.GetHashCode();
      if (Stack != 0L) hash ^= Stack.GetHashCode();
      if (Pot != 0L) hash ^= Pot.GetHashCode();
      if (MinBetThisRound != 0L) hash ^= MinBetThisRound.GetHashCode();
      if (BetThisRound != 0L) hash ^= BetThisRound.GetHashCode();
      if (BetThisHand != 0L) hash ^= BetThisHand.GetHashCode();
      if (Winnings != 0L) hash ^= Winnings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Bank != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Bank);
      }
      if (Stack != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Stack);
      }
      if (Pot != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(Pot);
      }
      if (MinBetThisRound != 0L) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(MinBetThisRound);
      }
      if (BetThisRound != 0L) {
        output.WriteRawTag(144, 3);
        output.WriteInt64(BetThisRound);
      }
      if (BetThisHand != 0L) {
        output.WriteRawTag(224, 3);
        output.WriteInt64(BetThisHand);
      }
      if (Winnings != 0L) {
        output.WriteRawTag(176, 4);
        output.WriteInt64(Winnings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Bank != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Bank);
      }
      if (Stack != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Stack);
      }
      if (Pot != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(Pot);
      }
      if (MinBetThisRound != 0L) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(MinBetThisRound);
      }
      if (BetThisRound != 0L) {
        output.WriteRawTag(144, 3);
        output.WriteInt64(BetThisRound);
      }
      if (BetThisHand != 0L) {
        output.WriteRawTag(224, 3);
        output.WriteInt64(BetThisHand);
      }
      if (Winnings != 0L) {
        output.WriteRawTag(176, 4);
        output.WriteInt64(Winnings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bank != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bank);
      }
      if (Stack != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Stack);
      }
      if (Pot != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Pot);
      }
      if (MinBetThisRound != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MinBetThisRound);
      }
      if (BetThisRound != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BetThisRound);
      }
      if (BetThisHand != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BetThisHand);
      }
      if (Winnings != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Winnings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerMoney other) {
      if (other == null) {
        return;
      }
      if (other.Bank != 0L) {
        Bank = other.Bank;
      }
      if (other.Stack != 0L) {
        Stack = other.Stack;
      }
      if (other.Pot != 0L) {
        Pot = other.Pot;
      }
      if (other.MinBetThisRound != 0L) {
        MinBetThisRound = other.MinBetThisRound;
      }
      if (other.BetThisRound != 0L) {
        BetThisRound = other.BetThisRound;
      }
      if (other.BetThisHand != 0L) {
        BetThisHand = other.BetThisHand;
      }
      if (other.Winnings != 0L) {
        Winnings = other.Winnings;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 80: {
            Bank = input.ReadInt64();
            break;
          }
          case 160: {
            Stack = input.ReadInt64();
            break;
          }
          case 240: {
            Pot = input.ReadInt64();
            break;
          }
          case 320: {
            MinBetThisRound = input.ReadInt64();
            break;
          }
          case 400: {
            BetThisRound = input.ReadInt64();
            break;
          }
          case 480: {
            BetThisHand = input.ReadInt64();
            break;
          }
          case 560: {
            Winnings = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 80: {
            Bank = input.ReadInt64();
            break;
          }
          case 160: {
            Stack = input.ReadInt64();
            break;
          }
          case 240: {
            Pot = input.ReadInt64();
            break;
          }
          case 320: {
            MinBetThisRound = input.ReadInt64();
            break;
          }
          case 400: {
            BetThisRound = input.ReadInt64();
            break;
          }
          case 480: {
            BetThisHand = input.ReadInt64();
            break;
          }
          case 560: {
            Winnings = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Player : pb::IMessage<Player>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      name_ = other.name_;
      id_ = other.id_;
      position_ = other.position_;
      money_ = other.money_ != null ? other.money_.Clone() : null;
      state_ = other.state_;
      card_ = other.card_.Clone();
      hand_ = other.hand_.Clone();
      combo_ = other.combo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 10;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 15;
    private string id_ = "";
    /// <summary>
    /// only filled in for the player that matches the requesting player
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 20;
    private long position_;
    /// <summary>
    /// position around the table
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 30;
    private global::Poker.PlayerMoney money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.PlayerMoney Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 50;
    private global::Poker.PlayerState state_ = global::Poker.PlayerState.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.PlayerState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 60;
    private static readonly pb::FieldCodec<global::Poker.Card> _repeated_card_codec
        = pb::FieldCodec.ForMessage(482, global::Poker.Card.Parser);
    private readonly pbc::RepeatedField<global::Poker.Card> card_ = new pbc::RepeatedField<global::Poker.Card>();
    /// <summary>
    /// only filled in for the player that matches the requesting player except at
    /// the end
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Poker.Card> Card {
      get { return card_; }
    }

    /// <summary>Field number for the "hand" field.</summary>
    public const int HandFieldNumber = 70;
    private static readonly pb::FieldCodec<global::Poker.Card> _repeated_hand_codec
        = pb::FieldCodec.ForMessage(562, global::Poker.Card.Parser);
    private readonly pbc::RepeatedField<global::Poker.Card> hand_ = new pbc::RepeatedField<global::Poker.Card>();
    /// <summary>
    /// Final hand of the player
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Poker.Card> Hand {
      get { return hand_; }
    }

    /// <summary>Field number for the "combo" field.</summary>
    public const int ComboFieldNumber = 80;
    private string combo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Combo {
      get { return combo_; }
      set {
        combo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Id != other.Id) return false;
      if (Position != other.Position) return false;
      if (!object.Equals(Money, other.Money)) return false;
      if (State != other.State) return false;
      if(!card_.Equals(other.card_)) return false;
      if(!hand_.Equals(other.hand_)) return false;
      if (Combo != other.Combo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Position != 0L) hash ^= Position.GetHashCode();
      if (money_ != null) hash ^= Money.GetHashCode();
      if (State != global::Poker.PlayerState.Unknown) hash ^= State.GetHashCode();
      hash ^= card_.GetHashCode();
      hash ^= hand_.GetHashCode();
      if (Combo.Length != 0) hash ^= Combo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Name);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Id);
      }
      if (Position != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Position);
      }
      if (money_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Money);
      }
      if (State != global::Poker.PlayerState.Unknown) {
        output.WriteRawTag(144, 3);
        output.WriteEnum((int) State);
      }
      card_.WriteTo(output, _repeated_card_codec);
      hand_.WriteTo(output, _repeated_hand_codec);
      if (Combo.Length != 0) {
        output.WriteRawTag(130, 5);
        output.WriteString(Combo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Name);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Id);
      }
      if (Position != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Position);
      }
      if (money_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Money);
      }
      if (State != global::Poker.PlayerState.Unknown) {
        output.WriteRawTag(144, 3);
        output.WriteEnum((int) State);
      }
      card_.WriteTo(ref output, _repeated_card_codec);
      hand_.WriteTo(ref output, _repeated_hand_codec);
      if (Combo.Length != 0) {
        output.WriteRawTag(130, 5);
        output.WriteString(Combo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Position != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Position);
      }
      if (money_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Money);
      }
      if (State != global::Poker.PlayerState.Unknown) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      size += card_.CalculateSize(_repeated_card_codec);
      size += hand_.CalculateSize(_repeated_hand_codec);
      if (Combo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Combo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Position != 0L) {
        Position = other.Position;
      }
      if (other.money_ != null) {
        if (money_ == null) {
          Money = new global::Poker.PlayerMoney();
        }
        Money.MergeFrom(other.Money);
      }
      if (other.State != global::Poker.PlayerState.Unknown) {
        State = other.State;
      }
      card_.Add(other.card_);
      hand_.Add(other.hand_);
      if (other.Combo.Length != 0) {
        Combo = other.Combo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            Name = input.ReadString();
            break;
          }
          case 122: {
            Id = input.ReadString();
            break;
          }
          case 160: {
            Position = input.ReadInt64();
            break;
          }
          case 242: {
            if (money_ == null) {
              Money = new global::Poker.PlayerMoney();
            }
            input.ReadMessage(Money);
            break;
          }
          case 400: {
            State = (global::Poker.PlayerState) input.ReadEnum();
            break;
          }
          case 482: {
            card_.AddEntriesFrom(input, _repeated_card_codec);
            break;
          }
          case 562: {
            hand_.AddEntriesFrom(input, _repeated_hand_codec);
            break;
          }
          case 642: {
            Combo = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            Name = input.ReadString();
            break;
          }
          case 122: {
            Id = input.ReadString();
            break;
          }
          case 160: {
            Position = input.ReadInt64();
            break;
          }
          case 242: {
            if (money_ == null) {
              Money = new global::Poker.PlayerMoney();
            }
            input.ReadMessage(Money);
            break;
          }
          case 400: {
            State = (global::Poker.PlayerState) input.ReadEnum();
            break;
          }
          case 482: {
            card_.AddEntriesFrom(ref input, _repeated_card_codec);
            break;
          }
          case 562: {
            hand_.AddEntriesFrom(ref input, _repeated_hand_codec);
            break;
          }
          case 642: {
            Combo = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CommunityCards : pb::IMessage<CommunityCards>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommunityCards> _parser = new pb::MessageParser<CommunityCards>(() => new CommunityCards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommunityCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityCards(CommunityCards other) : this() {
      card_ = other.card_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityCards Clone() {
      return new CommunityCards(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Poker.Card> _repeated_card_codec
        = pb::FieldCodec.ForMessage(82, global::Poker.Card.Parser);
    private readonly pbc::RepeatedField<global::Poker.Card> card_ = new pbc::RepeatedField<global::Poker.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Poker.Card> Card {
      get { return card_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommunityCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommunityCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!card_.Equals(other.card_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= card_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      card_.WriteTo(output, _repeated_card_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      card_.WriteTo(ref output, _repeated_card_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += card_.CalculateSize(_repeated_card_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommunityCards other) {
      if (other == null) {
        return;
      }
      card_.Add(other.card_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            card_.AddEntriesFrom(input, _repeated_card_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            card_.AddEntriesFrom(ref input, _repeated_card_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TableInfo : pb::IMessage<TableInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TableInfo> _parser = new pb::MessageParser<TableInfo>(() => new TableInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableInfo(TableInfo other) : this() {
      player_ = other.player_.Clone();
      nextPlayer_ = other.nextPlayer_ != null ? other.nextPlayer_.Clone() : null;
      turnTimeLeftSeconds_ = other.turnTimeLeftSeconds_;
      winners_ = other.winners_.Clone();
      communityCards_ = other.communityCards_ != null ? other.communityCards_.Clone() : null;
      tableStatus_ = other.tableStatus_;
      roundStatus_ = other.roundStatus_;
      tableID_ = other.tableID_;
      roundID_ = other.roundID_;
      smallBlind_ = other.smallBlind_;
      bigBlind_ = other.bigBlind_;
      token_ = other.token_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableInfo Clone() {
      return new TableInfo(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Poker.Player> _repeated_player_codec
        = pb::FieldCodec.ForMessage(82, global::Poker.Player.Parser);
    private readonly pbc::RepeatedField<global::Poker.Player> player_ = new pbc::RepeatedField<global::Poker.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Poker.Player> Player {
      get { return player_; }
    }

    /// <summary>Field number for the "nextPlayer" field.</summary>
    public const int NextPlayerFieldNumber = 20;
    private global::Poker.Player nextPlayer_;
    /// <summary>
    /// player whose turn it is
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.Player NextPlayer {
      get { return nextPlayer_; }
      set {
        nextPlayer_ = value;
      }
    }

    /// <summary>Field number for the "turnTimeLeftSeconds" field.</summary>
    public const int TurnTimeLeftSecondsFieldNumber = 25;
    private long turnTimeLeftSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TurnTimeLeftSeconds {
      get { return turnTimeLeftSeconds_; }
      set {
        turnTimeLeftSeconds_ = value;
      }
    }

    /// <summary>Field number for the "winners" field.</summary>
    public const int WinnersFieldNumber = 30;
    private static readonly pb::FieldCodec<global::Poker.Player> _repeated_winners_codec
        = pb::FieldCodec.ForMessage(242, global::Poker.Player.Parser);
    private readonly pbc::RepeatedField<global::Poker.Player> winners_ = new pbc::RepeatedField<global::Poker.Player>();
    /// <summary>
    ///  Winners
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Poker.Player> Winners {
      get { return winners_; }
    }

    /// <summary>Field number for the "community_cards" field.</summary>
    public const int CommunityCardsFieldNumber = 50;
    private global::Poker.CommunityCards communityCards_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.CommunityCards CommunityCards {
      get { return communityCards_; }
      set {
        communityCards_ = value;
      }
    }

    /// <summary>Field number for the "tableStatus" field.</summary>
    public const int TableStatusFieldNumber = 60;
    private global::Poker.TableStatus tableStatus_ = global::Poker.TableStatus.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.TableStatus TableStatus {
      get { return tableStatus_; }
      set {
        tableStatus_ = value;
      }
    }

    /// <summary>Field number for the "roundStatus" field.</summary>
    public const int RoundStatusFieldNumber = 70;
    private global::Poker.RoundStatus roundStatus_ = global::Poker.RoundStatus.Initializing;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.RoundStatus RoundStatus {
      get { return roundStatus_; }
      set {
        roundStatus_ = value;
      }
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 80;
    private string tableID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableID {
      get { return tableID_; }
      set {
        tableID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roundID" field.</summary>
    public const int RoundIDFieldNumber = 90;
    private string roundID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoundID {
      get { return roundID_; }
      set {
        roundID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "smallBlind" field.</summary>
    public const int SmallBlindFieldNumber = 100;
    private long smallBlind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SmallBlind {
      get { return smallBlind_; }
      set {
        smallBlind_ = value;
      }
    }

    /// <summary>Field number for the "bigBlind" field.</summary>
    public const int BigBlindFieldNumber = 110;
    private long bigBlind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BigBlind {
      get { return bigBlind_; }
      set {
        bigBlind_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 120;
    private string token_ = "";
    /// <summary>
    /// ack token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 130;
    private long startTime_;
    /// <summary>
    /// start and end of the round
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 140;
    private long endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!player_.Equals(other.player_)) return false;
      if (!object.Equals(NextPlayer, other.NextPlayer)) return false;
      if (TurnTimeLeftSeconds != other.TurnTimeLeftSeconds) return false;
      if(!winners_.Equals(other.winners_)) return false;
      if (!object.Equals(CommunityCards, other.CommunityCards)) return false;
      if (TableStatus != other.TableStatus) return false;
      if (RoundStatus != other.RoundStatus) return false;
      if (TableID != other.TableID) return false;
      if (RoundID != other.RoundID) return false;
      if (SmallBlind != other.SmallBlind) return false;
      if (BigBlind != other.BigBlind) return false;
      if (Token != other.Token) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= player_.GetHashCode();
      if (nextPlayer_ != null) hash ^= NextPlayer.GetHashCode();
      if (TurnTimeLeftSeconds != 0L) hash ^= TurnTimeLeftSeconds.GetHashCode();
      hash ^= winners_.GetHashCode();
      if (communityCards_ != null) hash ^= CommunityCards.GetHashCode();
      if (TableStatus != global::Poker.TableStatus.Unknown) hash ^= TableStatus.GetHashCode();
      if (RoundStatus != global::Poker.RoundStatus.Initializing) hash ^= RoundStatus.GetHashCode();
      if (TableID.Length != 0) hash ^= TableID.GetHashCode();
      if (RoundID.Length != 0) hash ^= RoundID.GetHashCode();
      if (SmallBlind != 0L) hash ^= SmallBlind.GetHashCode();
      if (BigBlind != 0L) hash ^= BigBlind.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      player_.WriteTo(output, _repeated_player_codec);
      if (nextPlayer_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(NextPlayer);
      }
      if (TurnTimeLeftSeconds != 0L) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(TurnTimeLeftSeconds);
      }
      winners_.WriteTo(output, _repeated_winners_codec);
      if (communityCards_ != null) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(CommunityCards);
      }
      if (TableStatus != global::Poker.TableStatus.Unknown) {
        output.WriteRawTag(224, 3);
        output.WriteEnum((int) TableStatus);
      }
      if (RoundStatus != global::Poker.RoundStatus.Initializing) {
        output.WriteRawTag(176, 4);
        output.WriteEnum((int) RoundStatus);
      }
      if (TableID.Length != 0) {
        output.WriteRawTag(130, 5);
        output.WriteString(TableID);
      }
      if (RoundID.Length != 0) {
        output.WriteRawTag(210, 5);
        output.WriteString(RoundID);
      }
      if (SmallBlind != 0L) {
        output.WriteRawTag(160, 6);
        output.WriteInt64(SmallBlind);
      }
      if (BigBlind != 0L) {
        output.WriteRawTag(240, 6);
        output.WriteInt64(BigBlind);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(194, 7);
        output.WriteString(Token);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(224, 8);
        output.WriteInt64(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      player_.WriteTo(ref output, _repeated_player_codec);
      if (nextPlayer_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(NextPlayer);
      }
      if (TurnTimeLeftSeconds != 0L) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(TurnTimeLeftSeconds);
      }
      winners_.WriteTo(ref output, _repeated_winners_codec);
      if (communityCards_ != null) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(CommunityCards);
      }
      if (TableStatus != global::Poker.TableStatus.Unknown) {
        output.WriteRawTag(224, 3);
        output.WriteEnum((int) TableStatus);
      }
      if (RoundStatus != global::Poker.RoundStatus.Initializing) {
        output.WriteRawTag(176, 4);
        output.WriteEnum((int) RoundStatus);
      }
      if (TableID.Length != 0) {
        output.WriteRawTag(130, 5);
        output.WriteString(TableID);
      }
      if (RoundID.Length != 0) {
        output.WriteRawTag(210, 5);
        output.WriteString(RoundID);
      }
      if (SmallBlind != 0L) {
        output.WriteRawTag(160, 6);
        output.WriteInt64(SmallBlind);
      }
      if (BigBlind != 0L) {
        output.WriteRawTag(240, 6);
        output.WriteInt64(BigBlind);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(194, 7);
        output.WriteString(Token);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(224, 8);
        output.WriteInt64(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += player_.CalculateSize(_repeated_player_codec);
      if (nextPlayer_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NextPlayer);
      }
      if (TurnTimeLeftSeconds != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TurnTimeLeftSeconds);
      }
      size += winners_.CalculateSize(_repeated_winners_codec);
      if (communityCards_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CommunityCards);
      }
      if (TableStatus != global::Poker.TableStatus.Unknown) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TableStatus);
      }
      if (RoundStatus != global::Poker.RoundStatus.Initializing) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RoundStatus);
      }
      if (TableID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TableID);
      }
      if (RoundID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RoundID);
      }
      if (SmallBlind != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SmallBlind);
      }
      if (BigBlind != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BigBlind);
      }
      if (Token.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (StartTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableInfo other) {
      if (other == null) {
        return;
      }
      player_.Add(other.player_);
      if (other.nextPlayer_ != null) {
        if (nextPlayer_ == null) {
          NextPlayer = new global::Poker.Player();
        }
        NextPlayer.MergeFrom(other.NextPlayer);
      }
      if (other.TurnTimeLeftSeconds != 0L) {
        TurnTimeLeftSeconds = other.TurnTimeLeftSeconds;
      }
      winners_.Add(other.winners_);
      if (other.communityCards_ != null) {
        if (communityCards_ == null) {
          CommunityCards = new global::Poker.CommunityCards();
        }
        CommunityCards.MergeFrom(other.CommunityCards);
      }
      if (other.TableStatus != global::Poker.TableStatus.Unknown) {
        TableStatus = other.TableStatus;
      }
      if (other.RoundStatus != global::Poker.RoundStatus.Initializing) {
        RoundStatus = other.RoundStatus;
      }
      if (other.TableID.Length != 0) {
        TableID = other.TableID;
      }
      if (other.RoundID.Length != 0) {
        RoundID = other.RoundID;
      }
      if (other.SmallBlind != 0L) {
        SmallBlind = other.SmallBlind;
      }
      if (other.BigBlind != 0L) {
        BigBlind = other.BigBlind;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            player_.AddEntriesFrom(input, _repeated_player_codec);
            break;
          }
          case 162: {
            if (nextPlayer_ == null) {
              NextPlayer = new global::Poker.Player();
            }
            input.ReadMessage(NextPlayer);
            break;
          }
          case 200: {
            TurnTimeLeftSeconds = input.ReadInt64();
            break;
          }
          case 242: {
            winners_.AddEntriesFrom(input, _repeated_winners_codec);
            break;
          }
          case 402: {
            if (communityCards_ == null) {
              CommunityCards = new global::Poker.CommunityCards();
            }
            input.ReadMessage(CommunityCards);
            break;
          }
          case 480: {
            TableStatus = (global::Poker.TableStatus) input.ReadEnum();
            break;
          }
          case 560: {
            RoundStatus = (global::Poker.RoundStatus) input.ReadEnum();
            break;
          }
          case 642: {
            TableID = input.ReadString();
            break;
          }
          case 722: {
            RoundID = input.ReadString();
            break;
          }
          case 800: {
            SmallBlind = input.ReadInt64();
            break;
          }
          case 880: {
            BigBlind = input.ReadInt64();
            break;
          }
          case 962: {
            Token = input.ReadString();
            break;
          }
          case 1040: {
            StartTime = input.ReadInt64();
            break;
          }
          case 1120: {
            EndTime = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            player_.AddEntriesFrom(ref input, _repeated_player_codec);
            break;
          }
          case 162: {
            if (nextPlayer_ == null) {
              NextPlayer = new global::Poker.Player();
            }
            input.ReadMessage(NextPlayer);
            break;
          }
          case 200: {
            TurnTimeLeftSeconds = input.ReadInt64();
            break;
          }
          case 242: {
            winners_.AddEntriesFrom(ref input, _repeated_winners_codec);
            break;
          }
          case 402: {
            if (communityCards_ == null) {
              CommunityCards = new global::Poker.CommunityCards();
            }
            input.ReadMessage(CommunityCards);
            break;
          }
          case 480: {
            TableStatus = (global::Poker.TableStatus) input.ReadEnum();
            break;
          }
          case 560: {
            RoundStatus = (global::Poker.RoundStatus) input.ReadEnum();
            break;
          }
          case 642: {
            TableID = input.ReadString();
            break;
          }
          case 722: {
            RoundID = input.ReadString();
            break;
          }
          case 800: {
            SmallBlind = input.ReadInt64();
            break;
          }
          case 880: {
            BigBlind = input.ReadInt64();
            break;
          }
          case 962: {
            Token = input.ReadString();
            break;
          }
          case 1040: {
            StartTime = input.ReadInt64();
            break;
          }
          case 1120: {
            EndTime = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GetInfoRequest : pb::IMessage<GetInfoRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetInfoRequest> _parser = new pb::MessageParser<GetInfoRequest>(() => new GetInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoRequest(GetInfoRequest other) : this() {
      tableID_ = other.tableID_;
      roundID_ = other.roundID_;
      playerID_ = other.playerID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoRequest Clone() {
      return new GetInfoRequest(this);
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 10;
    private string tableID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableID {
      get { return tableID_; }
      set {
        tableID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roundID" field.</summary>
    public const int RoundIDFieldNumber = 20;
    private string roundID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoundID {
      get { return roundID_; }
      set {
        roundID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 30;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableID != other.TableID) return false;
      if (RoundID != other.RoundID) return false;
      if (PlayerID != other.PlayerID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableID.Length != 0) hash ^= TableID.GetHashCode();
      if (RoundID.Length != 0) hash ^= RoundID.GetHashCode();
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TableID);
      }
      if (RoundID.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(RoundID);
      }
      if (PlayerID.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(PlayerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TableID);
      }
      if (RoundID.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(RoundID);
      }
      if (PlayerID.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(PlayerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableID);
      }
      if (RoundID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RoundID);
      }
      if (PlayerID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.TableID.Length != 0) {
        TableID = other.TableID;
      }
      if (other.RoundID.Length != 0) {
        RoundID = other.RoundID;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            TableID = input.ReadString();
            break;
          }
          case 162: {
            RoundID = input.ReadString();
            break;
          }
          case 242: {
            PlayerID = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            TableID = input.ReadString();
            break;
          }
          case 162: {
            RoundID = input.ReadString();
            break;
          }
          case 242: {
            PlayerID = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GetInfoResponse : pb::IMessage<GetInfoResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetInfoResponse> _parser = new pb::MessageParser<GetInfoResponse>(() => new GetInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoResponse(GetInfoResponse other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoResponse Clone() {
      return new GetInfoResponse(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 10;
    private global::Poker.TableInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.TableInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (info_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (info_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Poker.TableInfo();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            if (info_ == null) {
              Info = new global::Poker.TableInfo();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            if (info_ == null) {
              Info = new global::Poker.TableInfo();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code

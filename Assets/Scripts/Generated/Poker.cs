// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: poker.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Poker {

  /// <summary>Holder for reflection information generated from poker.proto</summary>
  public static partial class PokerReflection {

    #region Descriptor
    /// <summary>File descriptor for poker.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PokerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgtwb2tlci5wcm90bxIFcG9rZXIiRwoPQWNrVG9rZW5SZXF1ZXN0EiUKCmNs",
            "aWVudEluZm8YCiABKAsyES5wb2tlci5DbGllbnRJbmZvEg0KBXRva2VuGBQg",
            "ASgJIhIKEEFja1Rva2VuUmVzcG9uc2UiMQoKQWN0aW9uT3B0cxIRCgliZXRB",
            "bW91bnQYCiABKAMSEAoIYWNrVG9rZW4YFCABKAkiYwoPUmVnaXN0ZXJSZXF1",
            "ZXN0EiUKCmNsaWVudEluZm8YCiABKAsyES5wb2tlci5DbGllbnRJbmZvEikK",
            "DHBsYXllckFjdGlvbhgUIAEoDjITLnBva2VyLlBsYXllckFjdGlvbiI1ChBS",
            "ZWdpc3RlclJlc3BvbnNlEhAKCHBsYXllcklEGAogASgJEg8KB21lc3NhZ2UY",
            "FCABKAkidQoQSm9pblRhYmxlUmVxdWVzdBIlCgpjbGllbnRJbmZvGAogASgL",
            "MhEucG9rZXIuQ2xpZW50SW5mbxIpCgxwbGF5ZXJBY3Rpb24YFCABKA4yEy5w",
            "b2tlci5QbGF5ZXJBY3Rpb24SDwoHdGFibGVJRBgeIAEoCSJHChFKb2luVGFi",
            "bGVSZXNwb25zZRIPCgd0YWJsZUlEGAogASgJEhAKCHBvc2l0aW9uGBQgASgD",
            "Eg8KB21lc3NhZ2UYHiABKAkiigEKD1Rha2VUdXJuUmVxdWVzdBIlCgpjbGll",
            "bnRJbmZvGAogASgLMhEucG9rZXIuQ2xpZW50SW5mbxIpCgxwbGF5ZXJBY3Rp",
            "b24YFCABKA4yEy5wb2tlci5QbGF5ZXJBY3Rpb24SJQoKYWN0aW9uT3B0cxge",
            "IAEoCzIRLnBva2VyLkFjdGlvbk9wdHMiIwoQVGFrZVR1cm5SZXNwb25zZRIP",
            "CgdtZXNzYWdlGBQgASgJIiUKEkRpc2Nvbm5lY3RSZXNwb25zZRIPCgdtZXNz",
            "YWdlGBQgASgJIl8KC1BsYXlSZXF1ZXN0EiUKCmNsaWVudEluZm8YCiABKAsy",
            "ES5wb2tlci5DbGllbnRJbmZvEikKDHBsYXllckFjdGlvbhgyIAEoDjITLnBv",
            "a2VyLlBsYXllckFjdGlvbiJtCgpDbGllbnRJbmZvEhAKCHBsYXllcklEGAog",
            "ASgJEhIKCnBsYXllck5hbWUYFCABKAkSFgoOcGxheWVyVXNlcm5hbWUYHiAB",
            "KAkSDwoHdGFibGVJRBgoIAEoCRIQCghwYXNzd29yZBgyIAEoCSK/AwoIR2Ft",
            "ZUluZm8SEQoJdGFibGVOYW1lGAogASgJEg8KB3RhYmxlSUQYFCABKAkSIwoJ",
            "Z2FtZVN0YXRlGB4gASgOMhAucG9rZXIuR2FtZVN0YXRlEhcKD2dhbWVTdGFy",
            "dHNJblNlYxgoIAEoAxIaChJnYW1lU3RhcnRzSW5NYXhTZWMYLSABKAMSEAoI",
            "YWNrVG9rZW4YMiABKAkSLQoOQ29tbXVuaXR5Q2FyZHMYPCABKAsyFS5wb2tl",
            "ci5Db21tdW5pdHlDYXJkcxISCgptYXhQbGF5ZXJzGGQgASgDEhIKCm1pblBs",
            "YXllcnMYbiABKAMSEAoIYmlnQmxpbmQYeCABKAMSEgoKc21hbGxCbGluZBh9",
            "IAEoAxIOCgVidXlpbhiCASABKAMSFwoOYnV0dG9uUG9zaXRpb24YjAEgASgD",
            "EhsKEnNtYWxsQmxpbmRQb3NpdGlvbhiWASABKAMSGQoQYmlnQmxpbmRQb3Np",
            "dGlvbhigASABKAMSHwoHcGxheWVycxiqASADKAsyDS5wb2tlci5QbGF5ZXIS",
            "JAoLd2lubmluZ19pZHMYtAEgAygLMg4ucG9rZXIuV2lubmVycyIWCgdXaW5u",
            "ZXJzEgsKA2lkcxgKIAMoCSLSAQoIR2FtZURhdGESHQoEaW5mbxgKIAEoCzIP",
            "LnBva2VyLkdhbWVJbmZvEhIKCndhaXRUdXJuSUQYFCABKAkSFAoMd2FpdFR1",
            "cm5OYW1lGB4gASgJEhMKC3dhaXRUdXJuTnVtGCMgASgDEhsKE3dhaXRUdXJu",
            "VGltZUxlZnRTZWMYKCABKAMSGgoSd2FpdFR1cm5UaW1lTWF4U2VjGC0gASgD",
            "EhAKCHBsYXllcklEGDIgASgJEh0KBnBsYXllchhkIAEoCzINLnBva2VyLlBs",
            "YXllciLmAQoGUGxheWVyEgwKBG5hbWUYCiABKAkSCgoCaWQYDyABKAkSEAoI",
            "cG9zaXRpb24YFCABKAMSIQoFbW9uZXkYHiABKAsyEi5wb2tlci5QbGF5ZXJN",
            "b25leRIhCgVzdGF0ZRgyIAMoDjISLnBva2VyLlBsYXllclN0YXRlEhkKBGNh",
            "cmQYPCADKAsyCy5wb2tlci5DYXJkEhkKBGhhbmQYRiADKAsyCy5wb2tlci5D",
            "YXJkEg0KBWNvbWJvGFAgASgJEiUKCmxhc3RBY3Rpb24YWiABKAsyES5wb2tl",
            "ci5MYXN0QWN0aW9uIkEKCkxhc3RBY3Rpb24SIwoGYWN0aW9uGAogASgOMhMu",
            "cG9rZXIuUGxheWVyQWN0aW9uEg4KBmFtb3VudBgUIAEoAyKNAQoLUGxheWVy",
            "TW9uZXkSDAoEYmFuaxgKIAEoAxINCgVzdGFjaxgUIAEoAxILCgNwb3QYHiAB",
            "KAMSFwoPbWluQmV0VGhpc1JvdW5kGCggASgDEhQKDGJldFRoaXNSb3VuZBgy",
            "IAEoAxITCgtiZXRUaGlzSGFuZBg8IAEoAxIQCgh3aW5uaW5ncxhGIAEoAyIr",
            "Cg5Db21tdW5pdHlDYXJkcxIZCgRjYXJkGAogAygLMgsucG9rZXIuQ2FyZCJF",
            "CgRDYXJkEh4KBXN1aXRlGAogASgOMg8ucG9rZXIuQ2FyZFN1aXQSHQoEcmFu",
            "axgUIAEoDjIPLnBva2VyLkNhcmRSYW5rKqsCCgxQbGF5ZXJBY3Rpb24SFAoQ",
            "UGxheWVyQWN0aW9uTm9uZRAAEhgKFFBsYXllckFjdGlvblJlZ2lzdGVyEAES",
            "GQoVUGxheWVyQWN0aW9uSm9pblRhYmxlEAISFAoQUGxheWVyQWN0aW9uUGxh",
            "eRADEhQKEFBsYXllckFjdGlvbkNhbGwQBBIVChFQbGF5ZXJBY3Rpb25DaGVj",
            "axAFEhMKD1BsYXllckFjdGlvbkJldBAGEhQKEFBsYXllckFjdGlvbkZvbGQQ",
            "BxIYChRQbGF5ZXJBY3Rpb25BY2tUb2tlbhAIEhUKEVBsYXllckFjdGlvbkFs",
            "bEluEAkSFQoRUGxheWVyQWN0aW9uQnV5SW4QChIaChZQbGF5ZXJBY3Rpb25E",
            "aXNjb25uZWN0EAsquQIKCUdhbWVTdGF0ZRIbChdHYW1lU3RhdGVXYWl0aW5n",
            "UGxheWVycxAAEhkKFUdhbWVTdGF0ZUluaXRpYWxpemluZxABEhkKFUdhbWVT",
            "dGF0ZVJlYWR5VG9TdGFydBACEh4KGkdhbWVTdGF0ZVBsYXlpbmdTbWFsbEJs",
            "aW5kEAMSHAoYR2FtZVN0YXRlUGxheWluZ0JpZ0JsaW5kEAQSGwoXR2FtZVN0",
            "YXRlUGxheWluZ1ByZUZsb3AQBRIYChRHYW1lU3RhdGVQbGF5aW5nRmxvcBAG",
            "EhgKFEdhbWVTdGF0ZVBsYXlpbmdUdXJuEAcSGQoVR2FtZVN0YXRlUGxheWlu",
            "Z1JpdmVyEAgSGAoUR2FtZVN0YXRlUGxheWluZ0RvbmUQCRIVChFHYW1lU3Rh",
            "dGVGaW5pc2hlZBAKKo0BCgtQbGF5ZXJTdGF0ZRIWChJQbGF5ZXJTdGF0ZURl",
            "ZmF1bHQQABIVChFQbGF5ZXJTdGF0ZUZvbGRlZBABEhkKFVBsYXllclN0YXRl",
            "U3RhY2tFbXB0eRACEhgKFFBsYXllclN0YXRlQmFua0VtcHR5EAMSGgoWUGxh",
            "eWVyU3RhdGVDdXJyZW50VHVybhAEKjcKCENhcmRTdWl0EgkKBVNwYWRlEAAS",
            "CAoEQ2x1YhABEgsKB0RpYW1vbmQQAhIJCgVIZWFydBADKowBCghDYXJkUmFu",
            "axIHCgNUd28QABIJCgVUaHJlZRABEggKBEZvdXIQAhIICgRGaXZlEAMSBwoD",
            "U2l4EAQSCQoFU2V2ZW4QBRIJCgVFaWdodBAGEggKBE5pbmUQBxIHCgNUZW4Q",
            "CBIICgRKYWNrEAkSCQoFUXVlZW4QChIICgRLaW5nEAsSBwoDQWNlEAwyvQIK",
            "C1Bva2VyU2VydmVyEj0KCEFja1Rva2VuEhYucG9rZXIuQWNrVG9rZW5SZXF1",
            "ZXN0GhcucG9rZXIuQWNrVG9rZW5SZXNwb25zZSIAEkAKCUpvaW5UYWJsZRIX",
            "LnBva2VyLkpvaW5UYWJsZVJlcXVlc3QaGC5wb2tlci5Kb2luVGFibGVSZXNw",
            "b25zZSIAEi8KBFBsYXkSEi5wb2tlci5QbGF5UmVxdWVzdBoPLnBva2VyLkdh",
            "bWVEYXRhIgAwARI9CghSZWdpc3RlchIWLnBva2VyLlJlZ2lzdGVyUmVxdWVz",
            "dBoXLnBva2VyLlJlZ2lzdGVyUmVzcG9uc2UiABI9CghUYWtlVHVybhIWLnBv",
            "a2VyLlRha2VUdXJuUmVxdWVzdBoXLnBva2VyLlRha2VUdXJuUmVzcG9uc2Ui",
            "AEItWitnaXRodWIuY29tL0RhblR1b3Zza3kvcGVwcGVyLXBva2VyLXYyL3By",
            "b3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Poker.PlayerAction), typeof(global::Poker.GameState), typeof(global::Poker.PlayerState), typeof(global::Poker.CardSuit), typeof(global::Poker.CardRank), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.AckTokenRequest), global::Poker.AckTokenRequest.Parser, new[]{ "ClientInfo", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.AckTokenResponse), global::Poker.AckTokenResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.ActionOpts), global::Poker.ActionOpts.Parser, new[]{ "BetAmount", "AckToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.RegisterRequest), global::Poker.RegisterRequest.Parser, new[]{ "ClientInfo", "PlayerAction" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.RegisterResponse), global::Poker.RegisterResponse.Parser, new[]{ "PlayerID", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.JoinTableRequest), global::Poker.JoinTableRequest.Parser, new[]{ "ClientInfo", "PlayerAction", "TableID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.JoinTableResponse), global::Poker.JoinTableResponse.Parser, new[]{ "TableID", "Position", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.TakeTurnRequest), global::Poker.TakeTurnRequest.Parser, new[]{ "ClientInfo", "PlayerAction", "ActionOpts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.TakeTurnResponse), global::Poker.TakeTurnResponse.Parser, new[]{ "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.DisconnectResponse), global::Poker.DisconnectResponse.Parser, new[]{ "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.PlayRequest), global::Poker.PlayRequest.Parser, new[]{ "ClientInfo", "PlayerAction" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.ClientInfo), global::Poker.ClientInfo.Parser, new[]{ "PlayerID", "PlayerName", "PlayerUsername", "TableID", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.GameInfo), global::Poker.GameInfo.Parser, new[]{ "TableName", "TableID", "GameState", "GameStartsInSec", "GameStartsInMaxSec", "AckToken", "CommunityCards", "MaxPlayers", "MinPlayers", "BigBlind", "SmallBlind", "Buyin", "ButtonPosition", "SmallBlindPosition", "BigBlindPosition", "Players", "WinningIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.Winners), global::Poker.Winners.Parser, new[]{ "Ids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.GameData), global::Poker.GameData.Parser, new[]{ "Info", "WaitTurnID", "WaitTurnName", "WaitTurnNum", "WaitTurnTimeLeftSec", "WaitTurnTimeMaxSec", "PlayerID", "Player" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.Player), global::Poker.Player.Parser, new[]{ "Name", "Id", "Position", "Money", "State", "Card", "Hand", "Combo", "LastAction" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.LastAction), global::Poker.LastAction.Parser, new[]{ "Action", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.PlayerMoney), global::Poker.PlayerMoney.Parser, new[]{ "Bank", "Stack", "Pot", "MinBetThisRound", "BetThisRound", "BetThisHand", "Winnings" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.CommunityCards), global::Poker.CommunityCards.Parser, new[]{ "Card" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Poker.Card), global::Poker.Card.Parser, new[]{ "Suite", "Rank" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PlayerAction {
    [pbr::OriginalName("PlayerActionNone")] None = 0,
    [pbr::OriginalName("PlayerActionRegister")] Register = 1,
    [pbr::OriginalName("PlayerActionJoinTable")] JoinTable = 2,
    [pbr::OriginalName("PlayerActionPlay")] Play = 3,
    [pbr::OriginalName("PlayerActionCall")] Call = 4,
    [pbr::OriginalName("PlayerActionCheck")] Check = 5,
    [pbr::OriginalName("PlayerActionBet")] Bet = 6,
    [pbr::OriginalName("PlayerActionFold")] Fold = 7,
    [pbr::OriginalName("PlayerActionAckToken")] AckToken = 8,
    [pbr::OriginalName("PlayerActionAllIn")] AllIn = 9,
    [pbr::OriginalName("PlayerActionBuyIn")] BuyIn = 10,
    [pbr::OriginalName("PlayerActionDisconnect")] Disconnect = 11,
  }

  public enum GameState {
    [pbr::OriginalName("GameStateWaitingPlayers")] WaitingPlayers = 0,
    [pbr::OriginalName("GameStateInitializing")] Initializing = 1,
    [pbr::OriginalName("GameStateReadyToStart")] ReadyToStart = 2,
    [pbr::OriginalName("GameStatePlayingSmallBlind")] PlayingSmallBlind = 3,
    [pbr::OriginalName("GameStatePlayingBigBlind")] PlayingBigBlind = 4,
    [pbr::OriginalName("GameStatePlayingPreFlop")] PlayingPreFlop = 5,
    [pbr::OriginalName("GameStatePlayingFlop")] PlayingFlop = 6,
    [pbr::OriginalName("GameStatePlayingTurn")] PlayingTurn = 7,
    [pbr::OriginalName("GameStatePlayingRiver")] PlayingRiver = 8,
    [pbr::OriginalName("GameStatePlayingDone")] PlayingDone = 9,
    [pbr::OriginalName("GameStateFinished")] Finished = 10,
  }

  /// <summary>
  /// PlayerState is the player state according to the server
  /// </summary>
  public enum PlayerState {
    [pbr::OriginalName("PlayerStateDefault")] Default = 0,
    /// <summary>
    /// PlayerStateFolded denotes a player that folded
    /// </summary>
    [pbr::OriginalName("PlayerStateFolded")] Folded = 1,
    /// <summary>
    /// PlayerStateStackEmpty means the player has run out of money in the stack
    /// </summary>
    [pbr::OriginalName("PlayerStateStackEmpty")] StackEmpty = 2,
    /// <summary>
    /// PlayerStateBankEmpty means the player has run out of money in the bank
    /// </summary>
    [pbr::OriginalName("PlayerStateBankEmpty")] BankEmpty = 3,
    /// <summary>
    /// PlayerStateCurrentTurn marks this player's turn
    /// </summary>
    [pbr::OriginalName("PlayerStateCurrentTurn")] CurrentTurn = 4,
  }

  public enum CardSuit {
    [pbr::OriginalName("Spade")] Spade = 0,
    [pbr::OriginalName("Club")] Club = 1,
    [pbr::OriginalName("Diamond")] Diamond = 2,
    [pbr::OriginalName("Heart")] Heart = 3,
  }

  public enum CardRank {
    [pbr::OriginalName("Two")] Two = 0,
    [pbr::OriginalName("Three")] Three = 1,
    [pbr::OriginalName("Four")] Four = 2,
    [pbr::OriginalName("Five")] Five = 3,
    [pbr::OriginalName("Six")] Six = 4,
    [pbr::OriginalName("Seven")] Seven = 5,
    [pbr::OriginalName("Eight")] Eight = 6,
    [pbr::OriginalName("Nine")] Nine = 7,
    [pbr::OriginalName("Ten")] Ten = 8,
    [pbr::OriginalName("Jack")] Jack = 9,
    [pbr::OriginalName("Queen")] Queen = 10,
    [pbr::OriginalName("King")] King = 11,
    [pbr::OriginalName("Ace")] Ace = 12,
  }

  #endregion

  #region Messages
  public sealed partial class AckTokenRequest : pb::IMessage<AckTokenRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AckTokenRequest> _parser = new pb::MessageParser<AckTokenRequest>(() => new AckTokenRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckTokenRequest(AckTokenRequest other) : this() {
      clientInfo_ = other.clientInfo_ != null ? other.clientInfo_.Clone() : null;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckTokenRequest Clone() {
      return new AckTokenRequest(this);
    }

    /// <summary>Field number for the "clientInfo" field.</summary>
    public const int ClientInfoFieldNumber = 10;
    private global::Poker.ClientInfo clientInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.ClientInfo ClientInfo {
      get { return clientInfo_; }
      set {
        clientInfo_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 20;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClientInfo, other.ClientInfo)) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clientInfo_ != null) hash ^= ClientInfo.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (clientInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ClientInfo);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (clientInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ClientInfo);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clientInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientInfo);
      }
      if (Token.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.clientInfo_ != null) {
        if (clientInfo_ == null) {
          ClientInfo = new global::Poker.ClientInfo();
        }
        ClientInfo.MergeFrom(other.ClientInfo);
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            if (clientInfo_ == null) {
              ClientInfo = new global::Poker.ClientInfo();
            }
            input.ReadMessage(ClientInfo);
            break;
          }
          case 162: {
            Token = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            if (clientInfo_ == null) {
              ClientInfo = new global::Poker.ClientInfo();
            }
            input.ReadMessage(ClientInfo);
            break;
          }
          case 162: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AckTokenResponse : pb::IMessage<AckTokenResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AckTokenResponse> _parser = new pb::MessageParser<AckTokenResponse>(() => new AckTokenResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckTokenResponse(AckTokenResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckTokenResponse Clone() {
      return new AckTokenResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckTokenResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ActionOpts : pb::IMessage<ActionOpts>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionOpts> _parser = new pb::MessageParser<ActionOpts>(() => new ActionOpts());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionOpts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOpts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOpts(ActionOpts other) : this() {
      betAmount_ = other.betAmount_;
      ackToken_ = other.ackToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOpts Clone() {
      return new ActionOpts(this);
    }

    /// <summary>Field number for the "betAmount" field.</summary>
    public const int BetAmountFieldNumber = 10;
    private long betAmount_;
    /// <summary>
    /// Bet options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BetAmount {
      get { return betAmount_; }
      set {
        betAmount_ = value;
      }
    }

    /// <summary>Field number for the "ackToken" field.</summary>
    public const int AckTokenFieldNumber = 20;
    private string ackToken_ = "";
    /// <summary>
    /// Ack options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AckToken {
      get { return ackToken_; }
      set {
        ackToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionOpts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionOpts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BetAmount != other.BetAmount) return false;
      if (AckToken != other.AckToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BetAmount != 0L) hash ^= BetAmount.GetHashCode();
      if (AckToken.Length != 0) hash ^= AckToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BetAmount != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(BetAmount);
      }
      if (AckToken.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(AckToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BetAmount != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(BetAmount);
      }
      if (AckToken.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(AckToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BetAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BetAmount);
      }
      if (AckToken.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AckToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionOpts other) {
      if (other == null) {
        return;
      }
      if (other.BetAmount != 0L) {
        BetAmount = other.BetAmount;
      }
      if (other.AckToken.Length != 0) {
        AckToken = other.AckToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 80: {
            BetAmount = input.ReadInt64();
            break;
          }
          case 162: {
            AckToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 80: {
            BetAmount = input.ReadInt64();
            break;
          }
          case 162: {
            AckToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RegisterRequest : pb::IMessage<RegisterRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RegisterRequest> _parser = new pb::MessageParser<RegisterRequest>(() => new RegisterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterRequest(RegisterRequest other) : this() {
      clientInfo_ = other.clientInfo_ != null ? other.clientInfo_.Clone() : null;
      playerAction_ = other.playerAction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterRequest Clone() {
      return new RegisterRequest(this);
    }

    /// <summary>Field number for the "clientInfo" field.</summary>
    public const int ClientInfoFieldNumber = 10;
    private global::Poker.ClientInfo clientInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.ClientInfo ClientInfo {
      get { return clientInfo_; }
      set {
        clientInfo_ = value;
      }
    }

    /// <summary>Field number for the "playerAction" field.</summary>
    public const int PlayerActionFieldNumber = 20;
    private global::Poker.PlayerAction playerAction_ = global::Poker.PlayerAction.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.PlayerAction PlayerAction {
      get { return playerAction_; }
      set {
        playerAction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClientInfo, other.ClientInfo)) return false;
      if (PlayerAction != other.PlayerAction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clientInfo_ != null) hash ^= ClientInfo.GetHashCode();
      if (PlayerAction != global::Poker.PlayerAction.None) hash ^= PlayerAction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (clientInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ClientInfo);
      }
      if (PlayerAction != global::Poker.PlayerAction.None) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) PlayerAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (clientInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ClientInfo);
      }
      if (PlayerAction != global::Poker.PlayerAction.None) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) PlayerAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clientInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientInfo);
      }
      if (PlayerAction != global::Poker.PlayerAction.None) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PlayerAction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterRequest other) {
      if (other == null) {
        return;
      }
      if (other.clientInfo_ != null) {
        if (clientInfo_ == null) {
          ClientInfo = new global::Poker.ClientInfo();
        }
        ClientInfo.MergeFrom(other.ClientInfo);
      }
      if (other.PlayerAction != global::Poker.PlayerAction.None) {
        PlayerAction = other.PlayerAction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            if (clientInfo_ == null) {
              ClientInfo = new global::Poker.ClientInfo();
            }
            input.ReadMessage(ClientInfo);
            break;
          }
          case 160: {
            PlayerAction = (global::Poker.PlayerAction) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            if (clientInfo_ == null) {
              ClientInfo = new global::Poker.ClientInfo();
            }
            input.ReadMessage(ClientInfo);
            break;
          }
          case 160: {
            PlayerAction = (global::Poker.PlayerAction) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RegisterResponse : pb::IMessage<RegisterResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RegisterResponse> _parser = new pb::MessageParser<RegisterResponse>(() => new RegisterResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterResponse(RegisterResponse other) : this() {
      playerID_ = other.playerID_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterResponse Clone() {
      return new RegisterResponse(this);
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 10;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 20;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PlayerID);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PlayerID);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterResponse other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            PlayerID = input.ReadString();
            break;
          }
          case 162: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            PlayerID = input.ReadString();
            break;
          }
          case 162: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JoinTableRequest : pb::IMessage<JoinTableRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JoinTableRequest> _parser = new pb::MessageParser<JoinTableRequest>(() => new JoinTableRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinTableRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTableRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTableRequest(JoinTableRequest other) : this() {
      clientInfo_ = other.clientInfo_ != null ? other.clientInfo_.Clone() : null;
      playerAction_ = other.playerAction_;
      tableID_ = other.tableID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTableRequest Clone() {
      return new JoinTableRequest(this);
    }

    /// <summary>Field number for the "clientInfo" field.</summary>
    public const int ClientInfoFieldNumber = 10;
    private global::Poker.ClientInfo clientInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.ClientInfo ClientInfo {
      get { return clientInfo_; }
      set {
        clientInfo_ = value;
      }
    }

    /// <summary>Field number for the "playerAction" field.</summary>
    public const int PlayerActionFieldNumber = 20;
    private global::Poker.PlayerAction playerAction_ = global::Poker.PlayerAction.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.PlayerAction PlayerAction {
      get { return playerAction_; }
      set {
        playerAction_ = value;
      }
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 30;
    private string tableID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableID {
      get { return tableID_; }
      set {
        tableID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinTableRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinTableRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClientInfo, other.ClientInfo)) return false;
      if (PlayerAction != other.PlayerAction) return false;
      if (TableID != other.TableID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clientInfo_ != null) hash ^= ClientInfo.GetHashCode();
      if (PlayerAction != global::Poker.PlayerAction.None) hash ^= PlayerAction.GetHashCode();
      if (TableID.Length != 0) hash ^= TableID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (clientInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ClientInfo);
      }
      if (PlayerAction != global::Poker.PlayerAction.None) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) PlayerAction);
      }
      if (TableID.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(TableID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (clientInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ClientInfo);
      }
      if (PlayerAction != global::Poker.PlayerAction.None) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) PlayerAction);
      }
      if (TableID.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(TableID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clientInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientInfo);
      }
      if (PlayerAction != global::Poker.PlayerAction.None) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PlayerAction);
      }
      if (TableID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TableID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinTableRequest other) {
      if (other == null) {
        return;
      }
      if (other.clientInfo_ != null) {
        if (clientInfo_ == null) {
          ClientInfo = new global::Poker.ClientInfo();
        }
        ClientInfo.MergeFrom(other.ClientInfo);
      }
      if (other.PlayerAction != global::Poker.PlayerAction.None) {
        PlayerAction = other.PlayerAction;
      }
      if (other.TableID.Length != 0) {
        TableID = other.TableID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            if (clientInfo_ == null) {
              ClientInfo = new global::Poker.ClientInfo();
            }
            input.ReadMessage(ClientInfo);
            break;
          }
          case 160: {
            PlayerAction = (global::Poker.PlayerAction) input.ReadEnum();
            break;
          }
          case 242: {
            TableID = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            if (clientInfo_ == null) {
              ClientInfo = new global::Poker.ClientInfo();
            }
            input.ReadMessage(ClientInfo);
            break;
          }
          case 160: {
            PlayerAction = (global::Poker.PlayerAction) input.ReadEnum();
            break;
          }
          case 242: {
            TableID = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JoinTableResponse : pb::IMessage<JoinTableResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JoinTableResponse> _parser = new pb::MessageParser<JoinTableResponse>(() => new JoinTableResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinTableResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTableResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTableResponse(JoinTableResponse other) : this() {
      tableID_ = other.tableID_;
      position_ = other.position_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTableResponse Clone() {
      return new JoinTableResponse(this);
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 10;
    private string tableID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableID {
      get { return tableID_; }
      set {
        tableID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 20;
    private long position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 30;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinTableResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinTableResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableID != other.TableID) return false;
      if (Position != other.Position) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableID.Length != 0) hash ^= TableID.GetHashCode();
      if (Position != 0L) hash ^= Position.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TableID);
      }
      if (Position != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Position);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TableID);
      }
      if (Position != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Position);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableID);
      }
      if (Position != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Position);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinTableResponse other) {
      if (other == null) {
        return;
      }
      if (other.TableID.Length != 0) {
        TableID = other.TableID;
      }
      if (other.Position != 0L) {
        Position = other.Position;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            TableID = input.ReadString();
            break;
          }
          case 160: {
            Position = input.ReadInt64();
            break;
          }
          case 242: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            TableID = input.ReadString();
            break;
          }
          case 160: {
            Position = input.ReadInt64();
            break;
          }
          case 242: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TakeTurnRequest : pb::IMessage<TakeTurnRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TakeTurnRequest> _parser = new pb::MessageParser<TakeTurnRequest>(() => new TakeTurnRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakeTurnRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeTurnRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeTurnRequest(TakeTurnRequest other) : this() {
      clientInfo_ = other.clientInfo_ != null ? other.clientInfo_.Clone() : null;
      playerAction_ = other.playerAction_;
      actionOpts_ = other.actionOpts_ != null ? other.actionOpts_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeTurnRequest Clone() {
      return new TakeTurnRequest(this);
    }

    /// <summary>Field number for the "clientInfo" field.</summary>
    public const int ClientInfoFieldNumber = 10;
    private global::Poker.ClientInfo clientInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.ClientInfo ClientInfo {
      get { return clientInfo_; }
      set {
        clientInfo_ = value;
      }
    }

    /// <summary>Field number for the "playerAction" field.</summary>
    public const int PlayerActionFieldNumber = 20;
    private global::Poker.PlayerAction playerAction_ = global::Poker.PlayerAction.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.PlayerAction PlayerAction {
      get { return playerAction_; }
      set {
        playerAction_ = value;
      }
    }

    /// <summary>Field number for the "actionOpts" field.</summary>
    public const int ActionOptsFieldNumber = 30;
    private global::Poker.ActionOpts actionOpts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.ActionOpts ActionOpts {
      get { return actionOpts_; }
      set {
        actionOpts_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakeTurnRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakeTurnRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClientInfo, other.ClientInfo)) return false;
      if (PlayerAction != other.PlayerAction) return false;
      if (!object.Equals(ActionOpts, other.ActionOpts)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clientInfo_ != null) hash ^= ClientInfo.GetHashCode();
      if (PlayerAction != global::Poker.PlayerAction.None) hash ^= PlayerAction.GetHashCode();
      if (actionOpts_ != null) hash ^= ActionOpts.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (clientInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ClientInfo);
      }
      if (PlayerAction != global::Poker.PlayerAction.None) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) PlayerAction);
      }
      if (actionOpts_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(ActionOpts);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (clientInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ClientInfo);
      }
      if (PlayerAction != global::Poker.PlayerAction.None) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) PlayerAction);
      }
      if (actionOpts_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(ActionOpts);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clientInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientInfo);
      }
      if (PlayerAction != global::Poker.PlayerAction.None) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PlayerAction);
      }
      if (actionOpts_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ActionOpts);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakeTurnRequest other) {
      if (other == null) {
        return;
      }
      if (other.clientInfo_ != null) {
        if (clientInfo_ == null) {
          ClientInfo = new global::Poker.ClientInfo();
        }
        ClientInfo.MergeFrom(other.ClientInfo);
      }
      if (other.PlayerAction != global::Poker.PlayerAction.None) {
        PlayerAction = other.PlayerAction;
      }
      if (other.actionOpts_ != null) {
        if (actionOpts_ == null) {
          ActionOpts = new global::Poker.ActionOpts();
        }
        ActionOpts.MergeFrom(other.ActionOpts);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            if (clientInfo_ == null) {
              ClientInfo = new global::Poker.ClientInfo();
            }
            input.ReadMessage(ClientInfo);
            break;
          }
          case 160: {
            PlayerAction = (global::Poker.PlayerAction) input.ReadEnum();
            break;
          }
          case 242: {
            if (actionOpts_ == null) {
              ActionOpts = new global::Poker.ActionOpts();
            }
            input.ReadMessage(ActionOpts);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            if (clientInfo_ == null) {
              ClientInfo = new global::Poker.ClientInfo();
            }
            input.ReadMessage(ClientInfo);
            break;
          }
          case 160: {
            PlayerAction = (global::Poker.PlayerAction) input.ReadEnum();
            break;
          }
          case 242: {
            if (actionOpts_ == null) {
              ActionOpts = new global::Poker.ActionOpts();
            }
            input.ReadMessage(ActionOpts);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TakeTurnResponse : pb::IMessage<TakeTurnResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TakeTurnResponse> _parser = new pb::MessageParser<TakeTurnResponse>(() => new TakeTurnResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakeTurnResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeTurnResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeTurnResponse(TakeTurnResponse other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeTurnResponse Clone() {
      return new TakeTurnResponse(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 20;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakeTurnResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakeTurnResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Message.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Message.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakeTurnResponse other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 162: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 162: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DisconnectResponse : pb::IMessage<DisconnectResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DisconnectResponse> _parser = new pb::MessageParser<DisconnectResponse>(() => new DisconnectResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisconnectResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectResponse(DisconnectResponse other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectResponse Clone() {
      return new DisconnectResponse(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 20;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisconnectResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisconnectResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Message.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Message.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisconnectResponse other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 162: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 162: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// PlayRequest is sent to register for the GameData streaming response
  /// </summary>
  public sealed partial class PlayRequest : pb::IMessage<PlayRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayRequest> _parser = new pb::MessageParser<PlayRequest>(() => new PlayRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayRequest(PlayRequest other) : this() {
      clientInfo_ = other.clientInfo_ != null ? other.clientInfo_.Clone() : null;
      playerAction_ = other.playerAction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayRequest Clone() {
      return new PlayRequest(this);
    }

    /// <summary>Field number for the "clientInfo" field.</summary>
    public const int ClientInfoFieldNumber = 10;
    private global::Poker.ClientInfo clientInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.ClientInfo ClientInfo {
      get { return clientInfo_; }
      set {
        clientInfo_ = value;
      }
    }

    /// <summary>Field number for the "playerAction" field.</summary>
    public const int PlayerActionFieldNumber = 50;
    private global::Poker.PlayerAction playerAction_ = global::Poker.PlayerAction.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.PlayerAction PlayerAction {
      get { return playerAction_; }
      set {
        playerAction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClientInfo, other.ClientInfo)) return false;
      if (PlayerAction != other.PlayerAction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clientInfo_ != null) hash ^= ClientInfo.GetHashCode();
      if (PlayerAction != global::Poker.PlayerAction.None) hash ^= PlayerAction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (clientInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ClientInfo);
      }
      if (PlayerAction != global::Poker.PlayerAction.None) {
        output.WriteRawTag(144, 3);
        output.WriteEnum((int) PlayerAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (clientInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ClientInfo);
      }
      if (PlayerAction != global::Poker.PlayerAction.None) {
        output.WriteRawTag(144, 3);
        output.WriteEnum((int) PlayerAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clientInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientInfo);
      }
      if (PlayerAction != global::Poker.PlayerAction.None) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PlayerAction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayRequest other) {
      if (other == null) {
        return;
      }
      if (other.clientInfo_ != null) {
        if (clientInfo_ == null) {
          ClientInfo = new global::Poker.ClientInfo();
        }
        ClientInfo.MergeFrom(other.ClientInfo);
      }
      if (other.PlayerAction != global::Poker.PlayerAction.None) {
        PlayerAction = other.PlayerAction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            if (clientInfo_ == null) {
              ClientInfo = new global::Poker.ClientInfo();
            }
            input.ReadMessage(ClientInfo);
            break;
          }
          case 400: {
            PlayerAction = (global::Poker.PlayerAction) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            if (clientInfo_ == null) {
              ClientInfo = new global::Poker.ClientInfo();
            }
            input.ReadMessage(ClientInfo);
            break;
          }
          case 400: {
            PlayerAction = (global::Poker.PlayerAction) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ClientInfo is sent to the server with every RPC request, contains common data
  /// Not all fields are filled in for all requests
  /// </summary>
  public sealed partial class ClientInfo : pb::IMessage<ClientInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientInfo> _parser = new pb::MessageParser<ClientInfo>(() => new ClientInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientInfo(ClientInfo other) : this() {
      playerID_ = other.playerID_;
      playerName_ = other.playerName_;
      playerUsername_ = other.playerUsername_;
      tableID_ = other.tableID_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientInfo Clone() {
      return new ClientInfo(this);
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 10;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerName" field.</summary>
    public const int PlayerNameFieldNumber = 20;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerUsername" field.</summary>
    public const int PlayerUsernameFieldNumber = 30;
    private string playerUsername_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerUsername {
      get { return playerUsername_; }
      set {
        playerUsername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 40;
    private string tableID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableID {
      get { return tableID_; }
      set {
        tableID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 50;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (PlayerName != other.PlayerName) return false;
      if (PlayerUsername != other.PlayerUsername) return false;
      if (TableID != other.TableID) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (PlayerUsername.Length != 0) hash ^= PlayerUsername.GetHashCode();
      if (TableID.Length != 0) hash ^= TableID.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PlayerID);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(PlayerName);
      }
      if (PlayerUsername.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(PlayerUsername);
      }
      if (TableID.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(TableID);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PlayerID);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(PlayerName);
      }
      if (PlayerUsername.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(PlayerUsername);
      }
      if (TableID.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(TableID);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (PlayerName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (PlayerUsername.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PlayerUsername);
      }
      if (TableID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TableID);
      }
      if (Password.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.PlayerUsername.Length != 0) {
        PlayerUsername = other.PlayerUsername;
      }
      if (other.TableID.Length != 0) {
        TableID = other.TableID;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            PlayerID = input.ReadString();
            break;
          }
          case 162: {
            PlayerName = input.ReadString();
            break;
          }
          case 242: {
            PlayerUsername = input.ReadString();
            break;
          }
          case 322: {
            TableID = input.ReadString();
            break;
          }
          case 402: {
            Password = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            PlayerID = input.ReadString();
            break;
          }
          case 162: {
            PlayerName = input.ReadString();
            break;
          }
          case 242: {
            PlayerUsername = input.ReadString();
            break;
          }
          case 322: {
            TableID = input.ReadString();
            break;
          }
          case 402: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// GameInfo contains all the game info
  /// </summary>
  public sealed partial class GameInfo : pb::IMessage<GameInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameInfo> _parser = new pb::MessageParser<GameInfo>(() => new GameInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo(GameInfo other) : this() {
      tableName_ = other.tableName_;
      tableID_ = other.tableID_;
      gameState_ = other.gameState_;
      gameStartsInSec_ = other.gameStartsInSec_;
      gameStartsInMaxSec_ = other.gameStartsInMaxSec_;
      ackToken_ = other.ackToken_;
      communityCards_ = other.communityCards_ != null ? other.communityCards_.Clone() : null;
      maxPlayers_ = other.maxPlayers_;
      minPlayers_ = other.minPlayers_;
      bigBlind_ = other.bigBlind_;
      smallBlind_ = other.smallBlind_;
      buyin_ = other.buyin_;
      buttonPosition_ = other.buttonPosition_;
      smallBlindPosition_ = other.smallBlindPosition_;
      bigBlindPosition_ = other.bigBlindPosition_;
      players_ = other.players_.Clone();
      winningIds_ = other.winningIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo Clone() {
      return new GameInfo(this);
    }

    /// <summary>Field number for the "tableName" field.</summary>
    public const int TableNameFieldNumber = 10;
    private string tableName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 20;
    private string tableID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableID {
      get { return tableID_; }
      set {
        tableID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameState" field.</summary>
    public const int GameStateFieldNumber = 30;
    private global::Poker.GameState gameState_ = global::Poker.GameState.WaitingPlayers;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.GameState GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    /// <summary>Field number for the "gameStartsInSec" field.</summary>
    public const int GameStartsInSecFieldNumber = 40;
    private long gameStartsInSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GameStartsInSec {
      get { return gameStartsInSec_; }
      set {
        gameStartsInSec_ = value;
      }
    }

    /// <summary>Field number for the "gameStartsInMaxSec" field.</summary>
    public const int GameStartsInMaxSecFieldNumber = 45;
    private long gameStartsInMaxSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GameStartsInMaxSec {
      get { return gameStartsInMaxSec_; }
      set {
        gameStartsInMaxSec_ = value;
      }
    }

    /// <summary>Field number for the "ackToken" field.</summary>
    public const int AckTokenFieldNumber = 50;
    private string ackToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AckToken {
      get { return ackToken_; }
      set {
        ackToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CommunityCards" field.</summary>
    public const int CommunityCardsFieldNumber = 60;
    private global::Poker.CommunityCards communityCards_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.CommunityCards CommunityCards {
      get { return communityCards_; }
      set {
        communityCards_ = value;
      }
    }

    /// <summary>Field number for the "maxPlayers" field.</summary>
    public const int MaxPlayersFieldNumber = 100;
    private long maxPlayers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxPlayers {
      get { return maxPlayers_; }
      set {
        maxPlayers_ = value;
      }
    }

    /// <summary>Field number for the "minPlayers" field.</summary>
    public const int MinPlayersFieldNumber = 110;
    private long minPlayers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinPlayers {
      get { return minPlayers_; }
      set {
        minPlayers_ = value;
      }
    }

    /// <summary>Field number for the "bigBlind" field.</summary>
    public const int BigBlindFieldNumber = 120;
    private long bigBlind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BigBlind {
      get { return bigBlind_; }
      set {
        bigBlind_ = value;
      }
    }

    /// <summary>Field number for the "smallBlind" field.</summary>
    public const int SmallBlindFieldNumber = 125;
    private long smallBlind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SmallBlind {
      get { return smallBlind_; }
      set {
        smallBlind_ = value;
      }
    }

    /// <summary>Field number for the "buyin" field.</summary>
    public const int BuyinFieldNumber = 130;
    private long buyin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Buyin {
      get { return buyin_; }
      set {
        buyin_ = value;
      }
    }

    /// <summary>Field number for the "buttonPosition" field.</summary>
    public const int ButtonPositionFieldNumber = 140;
    private long buttonPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ButtonPosition {
      get { return buttonPosition_; }
      set {
        buttonPosition_ = value;
      }
    }

    /// <summary>Field number for the "smallBlindPosition" field.</summary>
    public const int SmallBlindPositionFieldNumber = 150;
    private long smallBlindPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SmallBlindPosition {
      get { return smallBlindPosition_; }
      set {
        smallBlindPosition_ = value;
      }
    }

    /// <summary>Field number for the "bigBlindPosition" field.</summary>
    public const int BigBlindPositionFieldNumber = 160;
    private long bigBlindPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BigBlindPosition {
      get { return bigBlindPosition_; }
      set {
        bigBlindPosition_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 170;
    private static readonly pb::FieldCodec<global::Poker.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(1362, global::Poker.Player.Parser);
    private readonly pbc::RepeatedField<global::Poker.Player> players_ = new pbc::RepeatedField<global::Poker.Player>();
    /// <summary>
    /// All players, no confidential info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Poker.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "winning_ids" field.</summary>
    public const int WinningIdsFieldNumber = 180;
    private static readonly pb::FieldCodec<global::Poker.Winners> _repeated_winningIds_codec
        = pb::FieldCodec.ForMessage(1442, global::Poker.Winners.Parser);
    private readonly pbc::RepeatedField<global::Poker.Winners> winningIds_ = new pbc::RepeatedField<global::Poker.Winners>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Poker.Winners> WinningIds {
      get { return winningIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      if (TableID != other.TableID) return false;
      if (GameState != other.GameState) return false;
      if (GameStartsInSec != other.GameStartsInSec) return false;
      if (GameStartsInMaxSec != other.GameStartsInMaxSec) return false;
      if (AckToken != other.AckToken) return false;
      if (!object.Equals(CommunityCards, other.CommunityCards)) return false;
      if (MaxPlayers != other.MaxPlayers) return false;
      if (MinPlayers != other.MinPlayers) return false;
      if (BigBlind != other.BigBlind) return false;
      if (SmallBlind != other.SmallBlind) return false;
      if (Buyin != other.Buyin) return false;
      if (ButtonPosition != other.ButtonPosition) return false;
      if (SmallBlindPosition != other.SmallBlindPosition) return false;
      if (BigBlindPosition != other.BigBlindPosition) return false;
      if(!players_.Equals(other.players_)) return false;
      if(!winningIds_.Equals(other.winningIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (TableID.Length != 0) hash ^= TableID.GetHashCode();
      if (GameState != global::Poker.GameState.WaitingPlayers) hash ^= GameState.GetHashCode();
      if (GameStartsInSec != 0L) hash ^= GameStartsInSec.GetHashCode();
      if (GameStartsInMaxSec != 0L) hash ^= GameStartsInMaxSec.GetHashCode();
      if (AckToken.Length != 0) hash ^= AckToken.GetHashCode();
      if (communityCards_ != null) hash ^= CommunityCards.GetHashCode();
      if (MaxPlayers != 0L) hash ^= MaxPlayers.GetHashCode();
      if (MinPlayers != 0L) hash ^= MinPlayers.GetHashCode();
      if (BigBlind != 0L) hash ^= BigBlind.GetHashCode();
      if (SmallBlind != 0L) hash ^= SmallBlind.GetHashCode();
      if (Buyin != 0L) hash ^= Buyin.GetHashCode();
      if (ButtonPosition != 0L) hash ^= ButtonPosition.GetHashCode();
      if (SmallBlindPosition != 0L) hash ^= SmallBlindPosition.GetHashCode();
      if (BigBlindPosition != 0L) hash ^= BigBlindPosition.GetHashCode();
      hash ^= players_.GetHashCode();
      hash ^= winningIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TableName);
      }
      if (TableID.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(TableID);
      }
      if (GameState != global::Poker.GameState.WaitingPlayers) {
        output.WriteRawTag(240, 1);
        output.WriteEnum((int) GameState);
      }
      if (GameStartsInSec != 0L) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(GameStartsInSec);
      }
      if (GameStartsInMaxSec != 0L) {
        output.WriteRawTag(232, 2);
        output.WriteInt64(GameStartsInMaxSec);
      }
      if (AckToken.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(AckToken);
      }
      if (communityCards_ != null) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(CommunityCards);
      }
      if (MaxPlayers != 0L) {
        output.WriteRawTag(160, 6);
        output.WriteInt64(MaxPlayers);
      }
      if (MinPlayers != 0L) {
        output.WriteRawTag(240, 6);
        output.WriteInt64(MinPlayers);
      }
      if (BigBlind != 0L) {
        output.WriteRawTag(192, 7);
        output.WriteInt64(BigBlind);
      }
      if (SmallBlind != 0L) {
        output.WriteRawTag(232, 7);
        output.WriteInt64(SmallBlind);
      }
      if (Buyin != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(Buyin);
      }
      if (ButtonPosition != 0L) {
        output.WriteRawTag(224, 8);
        output.WriteInt64(ButtonPosition);
      }
      if (SmallBlindPosition != 0L) {
        output.WriteRawTag(176, 9);
        output.WriteInt64(SmallBlindPosition);
      }
      if (BigBlindPosition != 0L) {
        output.WriteRawTag(128, 10);
        output.WriteInt64(BigBlindPosition);
      }
      players_.WriteTo(output, _repeated_players_codec);
      winningIds_.WriteTo(output, _repeated_winningIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TableName);
      }
      if (TableID.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(TableID);
      }
      if (GameState != global::Poker.GameState.WaitingPlayers) {
        output.WriteRawTag(240, 1);
        output.WriteEnum((int) GameState);
      }
      if (GameStartsInSec != 0L) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(GameStartsInSec);
      }
      if (GameStartsInMaxSec != 0L) {
        output.WriteRawTag(232, 2);
        output.WriteInt64(GameStartsInMaxSec);
      }
      if (AckToken.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(AckToken);
      }
      if (communityCards_ != null) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(CommunityCards);
      }
      if (MaxPlayers != 0L) {
        output.WriteRawTag(160, 6);
        output.WriteInt64(MaxPlayers);
      }
      if (MinPlayers != 0L) {
        output.WriteRawTag(240, 6);
        output.WriteInt64(MinPlayers);
      }
      if (BigBlind != 0L) {
        output.WriteRawTag(192, 7);
        output.WriteInt64(BigBlind);
      }
      if (SmallBlind != 0L) {
        output.WriteRawTag(232, 7);
        output.WriteInt64(SmallBlind);
      }
      if (Buyin != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(Buyin);
      }
      if (ButtonPosition != 0L) {
        output.WriteRawTag(224, 8);
        output.WriteInt64(ButtonPosition);
      }
      if (SmallBlindPosition != 0L) {
        output.WriteRawTag(176, 9);
        output.WriteInt64(SmallBlindPosition);
      }
      if (BigBlindPosition != 0L) {
        output.WriteRawTag(128, 10);
        output.WriteInt64(BigBlindPosition);
      }
      players_.WriteTo(ref output, _repeated_players_codec);
      winningIds_.WriteTo(ref output, _repeated_winningIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (TableID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TableID);
      }
      if (GameState != global::Poker.GameState.WaitingPlayers) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GameState);
      }
      if (GameStartsInSec != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GameStartsInSec);
      }
      if (GameStartsInMaxSec != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GameStartsInMaxSec);
      }
      if (AckToken.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AckToken);
      }
      if (communityCards_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CommunityCards);
      }
      if (MaxPlayers != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MaxPlayers);
      }
      if (MinPlayers != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MinPlayers);
      }
      if (BigBlind != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BigBlind);
      }
      if (SmallBlind != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SmallBlind);
      }
      if (Buyin != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Buyin);
      }
      if (ButtonPosition != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ButtonPosition);
      }
      if (SmallBlindPosition != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SmallBlindPosition);
      }
      if (BigBlindPosition != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BigBlindPosition);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      size += winningIds_.CalculateSize(_repeated_winningIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameInfo other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.TableID.Length != 0) {
        TableID = other.TableID;
      }
      if (other.GameState != global::Poker.GameState.WaitingPlayers) {
        GameState = other.GameState;
      }
      if (other.GameStartsInSec != 0L) {
        GameStartsInSec = other.GameStartsInSec;
      }
      if (other.GameStartsInMaxSec != 0L) {
        GameStartsInMaxSec = other.GameStartsInMaxSec;
      }
      if (other.AckToken.Length != 0) {
        AckToken = other.AckToken;
      }
      if (other.communityCards_ != null) {
        if (communityCards_ == null) {
          CommunityCards = new global::Poker.CommunityCards();
        }
        CommunityCards.MergeFrom(other.CommunityCards);
      }
      if (other.MaxPlayers != 0L) {
        MaxPlayers = other.MaxPlayers;
      }
      if (other.MinPlayers != 0L) {
        MinPlayers = other.MinPlayers;
      }
      if (other.BigBlind != 0L) {
        BigBlind = other.BigBlind;
      }
      if (other.SmallBlind != 0L) {
        SmallBlind = other.SmallBlind;
      }
      if (other.Buyin != 0L) {
        Buyin = other.Buyin;
      }
      if (other.ButtonPosition != 0L) {
        ButtonPosition = other.ButtonPosition;
      }
      if (other.SmallBlindPosition != 0L) {
        SmallBlindPosition = other.SmallBlindPosition;
      }
      if (other.BigBlindPosition != 0L) {
        BigBlindPosition = other.BigBlindPosition;
      }
      players_.Add(other.players_);
      winningIds_.Add(other.winningIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            TableName = input.ReadString();
            break;
          }
          case 162: {
            TableID = input.ReadString();
            break;
          }
          case 240: {
            GameState = (global::Poker.GameState) input.ReadEnum();
            break;
          }
          case 320: {
            GameStartsInSec = input.ReadInt64();
            break;
          }
          case 360: {
            GameStartsInMaxSec = input.ReadInt64();
            break;
          }
          case 402: {
            AckToken = input.ReadString();
            break;
          }
          case 482: {
            if (communityCards_ == null) {
              CommunityCards = new global::Poker.CommunityCards();
            }
            input.ReadMessage(CommunityCards);
            break;
          }
          case 800: {
            MaxPlayers = input.ReadInt64();
            break;
          }
          case 880: {
            MinPlayers = input.ReadInt64();
            break;
          }
          case 960: {
            BigBlind = input.ReadInt64();
            break;
          }
          case 1000: {
            SmallBlind = input.ReadInt64();
            break;
          }
          case 1040: {
            Buyin = input.ReadInt64();
            break;
          }
          case 1120: {
            ButtonPosition = input.ReadInt64();
            break;
          }
          case 1200: {
            SmallBlindPosition = input.ReadInt64();
            break;
          }
          case 1280: {
            BigBlindPosition = input.ReadInt64();
            break;
          }
          case 1362: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 1442: {
            winningIds_.AddEntriesFrom(input, _repeated_winningIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            TableName = input.ReadString();
            break;
          }
          case 162: {
            TableID = input.ReadString();
            break;
          }
          case 240: {
            GameState = (global::Poker.GameState) input.ReadEnum();
            break;
          }
          case 320: {
            GameStartsInSec = input.ReadInt64();
            break;
          }
          case 360: {
            GameStartsInMaxSec = input.ReadInt64();
            break;
          }
          case 402: {
            AckToken = input.ReadString();
            break;
          }
          case 482: {
            if (communityCards_ == null) {
              CommunityCards = new global::Poker.CommunityCards();
            }
            input.ReadMessage(CommunityCards);
            break;
          }
          case 800: {
            MaxPlayers = input.ReadInt64();
            break;
          }
          case 880: {
            MinPlayers = input.ReadInt64();
            break;
          }
          case 960: {
            BigBlind = input.ReadInt64();
            break;
          }
          case 1000: {
            SmallBlind = input.ReadInt64();
            break;
          }
          case 1040: {
            Buyin = input.ReadInt64();
            break;
          }
          case 1120: {
            ButtonPosition = input.ReadInt64();
            break;
          }
          case 1200: {
            SmallBlindPosition = input.ReadInt64();
            break;
          }
          case 1280: {
            BigBlindPosition = input.ReadInt64();
            break;
          }
          case 1362: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
          case 1442: {
            winningIds_.AddEntriesFrom(ref input, _repeated_winningIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Winners : pb::IMessage<Winners>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Winners> _parser = new pb::MessageParser<Winners>(() => new Winners());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Winners> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Winners() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Winners(Winners other) : this() {
      ids_ = other.ids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Winners Clone() {
      return new Winners(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_ids_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> ids_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Winners);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Winners other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      ids_.WriteTo(output, _repeated_ids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      ids_.WriteTo(ref output, _repeated_ids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Winners other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            ids_.AddEntriesFrom(ref input, _repeated_ids_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// GameData is sent to the client, it tells the client when it's their turn and
  /// provides the current state
  /// </summary>
  public sealed partial class GameData : pb::IMessage<GameData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameData> _parser = new pb::MessageParser<GameData>(() => new GameData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameData(GameData other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      waitTurnID_ = other.waitTurnID_;
      waitTurnName_ = other.waitTurnName_;
      waitTurnNum_ = other.waitTurnNum_;
      waitTurnTimeLeftSec_ = other.waitTurnTimeLeftSec_;
      waitTurnTimeMaxSec_ = other.waitTurnTimeMaxSec_;
      playerID_ = other.playerID_;
      player_ = other.player_ != null ? other.player_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameData Clone() {
      return new GameData(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 10;
    private global::Poker.GameInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.GameInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "waitTurnID" field.</summary>
    public const int WaitTurnIDFieldNumber = 20;
    private string waitTurnID_ = "";
    /// <summary>
    /// the ID of the player whose turn it is
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WaitTurnID {
      get { return waitTurnID_; }
      set {
        waitTurnID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "waitTurnName" field.</summary>
    public const int WaitTurnNameFieldNumber = 30;
    private string waitTurnName_ = "";
    /// <summary>
    /// the name of the player whose turn it is
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WaitTurnName {
      get { return waitTurnName_; }
      set {
        waitTurnName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "waitTurnNum" field.</summary>
    public const int WaitTurnNumFieldNumber = 35;
    private long waitTurnNum_;
    /// <summary>
    /// the turn count of the player whose turn it is
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WaitTurnNum {
      get { return waitTurnNum_; }
      set {
        waitTurnNum_ = value;
      }
    }

    /// <summary>Field number for the "waitTurnTimeLeftSec" field.</summary>
    public const int WaitTurnTimeLeftSecFieldNumber = 40;
    private long waitTurnTimeLeftSec_;
    /// <summary>
    /// turn time left for player
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WaitTurnTimeLeftSec {
      get { return waitTurnTimeLeftSec_; }
      set {
        waitTurnTimeLeftSec_ = value;
      }
    }

    /// <summary>Field number for the "waitTurnTimeMaxSec" field.</summary>
    public const int WaitTurnTimeMaxSecFieldNumber = 45;
    private long waitTurnTimeMaxSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WaitTurnTimeMaxSec {
      get { return waitTurnTimeMaxSec_; }
      set {
        waitTurnTimeMaxSec_ = value;
      }
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 50;
    private string playerID_ = "";
    /// <summary>
    /// the ID of the calling player
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 100;
    private global::Poker.Player player_;
    /// <summary>
    /// calling player, includes confidential info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.Player Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      if (WaitTurnID != other.WaitTurnID) return false;
      if (WaitTurnName != other.WaitTurnName) return false;
      if (WaitTurnNum != other.WaitTurnNum) return false;
      if (WaitTurnTimeLeftSec != other.WaitTurnTimeLeftSec) return false;
      if (WaitTurnTimeMaxSec != other.WaitTurnTimeMaxSec) return false;
      if (PlayerID != other.PlayerID) return false;
      if (!object.Equals(Player, other.Player)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (WaitTurnID.Length != 0) hash ^= WaitTurnID.GetHashCode();
      if (WaitTurnName.Length != 0) hash ^= WaitTurnName.GetHashCode();
      if (WaitTurnNum != 0L) hash ^= WaitTurnNum.GetHashCode();
      if (WaitTurnTimeLeftSec != 0L) hash ^= WaitTurnTimeLeftSec.GetHashCode();
      if (WaitTurnTimeMaxSec != 0L) hash ^= WaitTurnTimeMaxSec.GetHashCode();
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (info_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Info);
      }
      if (WaitTurnID.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WaitTurnID);
      }
      if (WaitTurnName.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(WaitTurnName);
      }
      if (WaitTurnNum != 0L) {
        output.WriteRawTag(152, 2);
        output.WriteInt64(WaitTurnNum);
      }
      if (WaitTurnTimeLeftSec != 0L) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(WaitTurnTimeLeftSec);
      }
      if (WaitTurnTimeMaxSec != 0L) {
        output.WriteRawTag(232, 2);
        output.WriteInt64(WaitTurnTimeMaxSec);
      }
      if (PlayerID.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(PlayerID);
      }
      if (player_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (info_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Info);
      }
      if (WaitTurnID.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WaitTurnID);
      }
      if (WaitTurnName.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(WaitTurnName);
      }
      if (WaitTurnNum != 0L) {
        output.WriteRawTag(152, 2);
        output.WriteInt64(WaitTurnNum);
      }
      if (WaitTurnTimeLeftSec != 0L) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(WaitTurnTimeLeftSec);
      }
      if (WaitTurnTimeMaxSec != 0L) {
        output.WriteRawTag(232, 2);
        output.WriteInt64(WaitTurnTimeMaxSec);
      }
      if (PlayerID.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(PlayerID);
      }
      if (player_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (WaitTurnID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WaitTurnID);
      }
      if (WaitTurnName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WaitTurnName);
      }
      if (WaitTurnNum != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WaitTurnNum);
      }
      if (WaitTurnTimeLeftSec != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WaitTurnTimeLeftSec);
      }
      if (WaitTurnTimeMaxSec != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WaitTurnTimeMaxSec);
      }
      if (PlayerID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (player_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameData other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Poker.GameInfo();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.WaitTurnID.Length != 0) {
        WaitTurnID = other.WaitTurnID;
      }
      if (other.WaitTurnName.Length != 0) {
        WaitTurnName = other.WaitTurnName;
      }
      if (other.WaitTurnNum != 0L) {
        WaitTurnNum = other.WaitTurnNum;
      }
      if (other.WaitTurnTimeLeftSec != 0L) {
        WaitTurnTimeLeftSec = other.WaitTurnTimeLeftSec;
      }
      if (other.WaitTurnTimeMaxSec != 0L) {
        WaitTurnTimeMaxSec = other.WaitTurnTimeMaxSec;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::Poker.Player();
        }
        Player.MergeFrom(other.Player);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            if (info_ == null) {
              Info = new global::Poker.GameInfo();
            }
            input.ReadMessage(Info);
            break;
          }
          case 162: {
            WaitTurnID = input.ReadString();
            break;
          }
          case 242: {
            WaitTurnName = input.ReadString();
            break;
          }
          case 280: {
            WaitTurnNum = input.ReadInt64();
            break;
          }
          case 320: {
            WaitTurnTimeLeftSec = input.ReadInt64();
            break;
          }
          case 360: {
            WaitTurnTimeMaxSec = input.ReadInt64();
            break;
          }
          case 402: {
            PlayerID = input.ReadString();
            break;
          }
          case 802: {
            if (player_ == null) {
              Player = new global::Poker.Player();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            if (info_ == null) {
              Info = new global::Poker.GameInfo();
            }
            input.ReadMessage(Info);
            break;
          }
          case 162: {
            WaitTurnID = input.ReadString();
            break;
          }
          case 242: {
            WaitTurnName = input.ReadString();
            break;
          }
          case 280: {
            WaitTurnNum = input.ReadInt64();
            break;
          }
          case 320: {
            WaitTurnTimeLeftSec = input.ReadInt64();
            break;
          }
          case 360: {
            WaitTurnTimeMaxSec = input.ReadInt64();
            break;
          }
          case 402: {
            PlayerID = input.ReadString();
            break;
          }
          case 802: {
            if (player_ == null) {
              Player = new global::Poker.Player();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Player : pb::IMessage<Player>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      name_ = other.name_;
      id_ = other.id_;
      position_ = other.position_;
      money_ = other.money_ != null ? other.money_.Clone() : null;
      state_ = other.state_.Clone();
      card_ = other.card_.Clone();
      hand_ = other.hand_.Clone();
      combo_ = other.combo_;
      lastAction_ = other.lastAction_ != null ? other.lastAction_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 10;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 15;
    private string id_ = "";
    /// <summary>
    /// only filled in for the player that matches the requesting player
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 20;
    private long position_;
    /// <summary>
    /// position around the table
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 30;
    private global::Poker.PlayerMoney money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.PlayerMoney Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 50;
    private static readonly pb::FieldCodec<global::Poker.PlayerState> _repeated_state_codec
        = pb::FieldCodec.ForEnum(402, x => (int) x, x => (global::Poker.PlayerState) x);
    private readonly pbc::RepeatedField<global::Poker.PlayerState> state_ = new pbc::RepeatedField<global::Poker.PlayerState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Poker.PlayerState> State {
      get { return state_; }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 60;
    private static readonly pb::FieldCodec<global::Poker.Card> _repeated_card_codec
        = pb::FieldCodec.ForMessage(482, global::Poker.Card.Parser);
    private readonly pbc::RepeatedField<global::Poker.Card> card_ = new pbc::RepeatedField<global::Poker.Card>();
    /// <summary>
    /// only filled in for the player that matches the requesting player except at
    /// the end
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Poker.Card> Card {
      get { return card_; }
    }

    /// <summary>Field number for the "hand" field.</summary>
    public const int HandFieldNumber = 70;
    private static readonly pb::FieldCodec<global::Poker.Card> _repeated_hand_codec
        = pb::FieldCodec.ForMessage(562, global::Poker.Card.Parser);
    private readonly pbc::RepeatedField<global::Poker.Card> hand_ = new pbc::RepeatedField<global::Poker.Card>();
    /// <summary>
    /// Final hand of the player
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Poker.Card> Hand {
      get { return hand_; }
    }

    /// <summary>Field number for the "combo" field.</summary>
    public const int ComboFieldNumber = 80;
    private string combo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Combo {
      get { return combo_; }
      set {
        combo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastAction" field.</summary>
    public const int LastActionFieldNumber = 90;
    private global::Poker.LastAction lastAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.LastAction LastAction {
      get { return lastAction_; }
      set {
        lastAction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Id != other.Id) return false;
      if (Position != other.Position) return false;
      if (!object.Equals(Money, other.Money)) return false;
      if(!state_.Equals(other.state_)) return false;
      if(!card_.Equals(other.card_)) return false;
      if(!hand_.Equals(other.hand_)) return false;
      if (Combo != other.Combo) return false;
      if (!object.Equals(LastAction, other.LastAction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Position != 0L) hash ^= Position.GetHashCode();
      if (money_ != null) hash ^= Money.GetHashCode();
      hash ^= state_.GetHashCode();
      hash ^= card_.GetHashCode();
      hash ^= hand_.GetHashCode();
      if (Combo.Length != 0) hash ^= Combo.GetHashCode();
      if (lastAction_ != null) hash ^= LastAction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Name);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Id);
      }
      if (Position != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Position);
      }
      if (money_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Money);
      }
      state_.WriteTo(output, _repeated_state_codec);
      card_.WriteTo(output, _repeated_card_codec);
      hand_.WriteTo(output, _repeated_hand_codec);
      if (Combo.Length != 0) {
        output.WriteRawTag(130, 5);
        output.WriteString(Combo);
      }
      if (lastAction_ != null) {
        output.WriteRawTag(210, 5);
        output.WriteMessage(LastAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Name);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Id);
      }
      if (Position != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Position);
      }
      if (money_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Money);
      }
      state_.WriteTo(ref output, _repeated_state_codec);
      card_.WriteTo(ref output, _repeated_card_codec);
      hand_.WriteTo(ref output, _repeated_hand_codec);
      if (Combo.Length != 0) {
        output.WriteRawTag(130, 5);
        output.WriteString(Combo);
      }
      if (lastAction_ != null) {
        output.WriteRawTag(210, 5);
        output.WriteMessage(LastAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Position != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Position);
      }
      if (money_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Money);
      }
      size += state_.CalculateSize(_repeated_state_codec);
      size += card_.CalculateSize(_repeated_card_codec);
      size += hand_.CalculateSize(_repeated_hand_codec);
      if (Combo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Combo);
      }
      if (lastAction_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastAction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Position != 0L) {
        Position = other.Position;
      }
      if (other.money_ != null) {
        if (money_ == null) {
          Money = new global::Poker.PlayerMoney();
        }
        Money.MergeFrom(other.Money);
      }
      state_.Add(other.state_);
      card_.Add(other.card_);
      hand_.Add(other.hand_);
      if (other.Combo.Length != 0) {
        Combo = other.Combo;
      }
      if (other.lastAction_ != null) {
        if (lastAction_ == null) {
          LastAction = new global::Poker.LastAction();
        }
        LastAction.MergeFrom(other.LastAction);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            Name = input.ReadString();
            break;
          }
          case 122: {
            Id = input.ReadString();
            break;
          }
          case 160: {
            Position = input.ReadInt64();
            break;
          }
          case 242: {
            if (money_ == null) {
              Money = new global::Poker.PlayerMoney();
            }
            input.ReadMessage(Money);
            break;
          }
          case 402:
          case 400: {
            state_.AddEntriesFrom(input, _repeated_state_codec);
            break;
          }
          case 482: {
            card_.AddEntriesFrom(input, _repeated_card_codec);
            break;
          }
          case 562: {
            hand_.AddEntriesFrom(input, _repeated_hand_codec);
            break;
          }
          case 642: {
            Combo = input.ReadString();
            break;
          }
          case 722: {
            if (lastAction_ == null) {
              LastAction = new global::Poker.LastAction();
            }
            input.ReadMessage(LastAction);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            Name = input.ReadString();
            break;
          }
          case 122: {
            Id = input.ReadString();
            break;
          }
          case 160: {
            Position = input.ReadInt64();
            break;
          }
          case 242: {
            if (money_ == null) {
              Money = new global::Poker.PlayerMoney();
            }
            input.ReadMessage(Money);
            break;
          }
          case 402:
          case 400: {
            state_.AddEntriesFrom(ref input, _repeated_state_codec);
            break;
          }
          case 482: {
            card_.AddEntriesFrom(ref input, _repeated_card_codec);
            break;
          }
          case 562: {
            hand_.AddEntriesFrom(ref input, _repeated_hand_codec);
            break;
          }
          case 642: {
            Combo = input.ReadString();
            break;
          }
          case 722: {
            if (lastAction_ == null) {
              LastAction = new global::Poker.LastAction();
            }
            input.ReadMessage(LastAction);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LastAction : pb::IMessage<LastAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LastAction> _parser = new pb::MessageParser<LastAction>(() => new LastAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LastAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LastAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LastAction(LastAction other) : this() {
      action_ = other.action_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LastAction Clone() {
      return new LastAction(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 10;
    private global::Poker.PlayerAction action_ = global::Poker.PlayerAction.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.PlayerAction Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 20;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LastAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LastAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != global::Poker.PlayerAction.None) hash ^= Action.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Action != global::Poker.PlayerAction.None) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Action);
      }
      if (Amount != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Action != global::Poker.PlayerAction.None) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Action);
      }
      if (Amount != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != global::Poker.PlayerAction.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (Amount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LastAction other) {
      if (other == null) {
        return;
      }
      if (other.Action != global::Poker.PlayerAction.None) {
        Action = other.Action;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 80: {
            Action = (global::Poker.PlayerAction) input.ReadEnum();
            break;
          }
          case 160: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 80: {
            Action = (global::Poker.PlayerAction) input.ReadEnum();
            break;
          }
          case 160: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerMoney : pb::IMessage<PlayerMoney>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerMoney> _parser = new pb::MessageParser<PlayerMoney>(() => new PlayerMoney());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerMoney> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMoney() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMoney(PlayerMoney other) : this() {
      bank_ = other.bank_;
      stack_ = other.stack_;
      pot_ = other.pot_;
      minBetThisRound_ = other.minBetThisRound_;
      betThisRound_ = other.betThisRound_;
      betThisHand_ = other.betThisHand_;
      winnings_ = other.winnings_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMoney Clone() {
      return new PlayerMoney(this);
    }

    /// <summary>Field number for the "bank" field.</summary>
    public const int BankFieldNumber = 10;
    private long bank_;
    /// <summary>
    /// money player has in the bank, excluding what they're currently playing with
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Bank {
      get { return bank_; }
      set {
        bank_ = value;
      }
    }

    /// <summary>Field number for the "stack" field.</summary>
    public const int StackFieldNumber = 20;
    private long stack_;
    /// <summary>
    /// money in the stack the player is playing with at their table
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Stack {
      get { return stack_; }
      set {
        stack_ = value;
      }
    }

    /// <summary>Field number for the "pot" field.</summary>
    public const int PotFieldNumber = 30;
    private long pot_;
    /// <summary>
    /// total pot size so far in the hand
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Pot {
      get { return pot_; }
      set {
        pot_ = value;
      }
    }

    /// <summary>Field number for the "minBetThisRound" field.</summary>
    public const int MinBetThisRoundFieldNumber = 40;
    private long minBetThisRound_;
    /// <summary>
    /// current minimum bet this betting round
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinBetThisRound {
      get { return minBetThisRound_; }
      set {
        minBetThisRound_ = value;
      }
    }

    /// <summary>Field number for the "betThisRound" field.</summary>
    public const int BetThisRoundFieldNumber = 50;
    private long betThisRound_;
    /// <summary>
    /// money bet by the player in the betting round so far
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BetThisRound {
      get { return betThisRound_; }
      set {
        betThisRound_ = value;
      }
    }

    /// <summary>Field number for the "betThisHand" field.</summary>
    public const int BetThisHandFieldNumber = 60;
    private long betThisHand_;
    /// <summary>
    /// total money bet by the player in the hand so far
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BetThisHand {
      get { return betThisHand_; }
      set {
        betThisHand_ = value;
      }
    }

    /// <summary>Field number for the "winnings" field.</summary>
    public const int WinningsFieldNumber = 70;
    private long winnings_;
    /// <summary>
    /// total money won by this player in the hand
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Winnings {
      get { return winnings_; }
      set {
        winnings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerMoney);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerMoney other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Bank != other.Bank) return false;
      if (Stack != other.Stack) return false;
      if (Pot != other.Pot) return false;
      if (MinBetThisRound != other.MinBetThisRound) return false;
      if (BetThisRound != other.BetThisRound) return false;
      if (BetThisHand != other.BetThisHand) return false;
      if (Winnings != other.Winnings) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Bank != 0L) hash ^= Bank.GetHashCode();
      if (Stack != 0L) hash ^= Stack.GetHashCode();
      if (Pot != 0L) hash ^= Pot.GetHashCode();
      if (MinBetThisRound != 0L) hash ^= MinBetThisRound.GetHashCode();
      if (BetThisRound != 0L) hash ^= BetThisRound.GetHashCode();
      if (BetThisHand != 0L) hash ^= BetThisHand.GetHashCode();
      if (Winnings != 0L) hash ^= Winnings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Bank != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Bank);
      }
      if (Stack != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Stack);
      }
      if (Pot != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(Pot);
      }
      if (MinBetThisRound != 0L) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(MinBetThisRound);
      }
      if (BetThisRound != 0L) {
        output.WriteRawTag(144, 3);
        output.WriteInt64(BetThisRound);
      }
      if (BetThisHand != 0L) {
        output.WriteRawTag(224, 3);
        output.WriteInt64(BetThisHand);
      }
      if (Winnings != 0L) {
        output.WriteRawTag(176, 4);
        output.WriteInt64(Winnings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Bank != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Bank);
      }
      if (Stack != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Stack);
      }
      if (Pot != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(Pot);
      }
      if (MinBetThisRound != 0L) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(MinBetThisRound);
      }
      if (BetThisRound != 0L) {
        output.WriteRawTag(144, 3);
        output.WriteInt64(BetThisRound);
      }
      if (BetThisHand != 0L) {
        output.WriteRawTag(224, 3);
        output.WriteInt64(BetThisHand);
      }
      if (Winnings != 0L) {
        output.WriteRawTag(176, 4);
        output.WriteInt64(Winnings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bank != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bank);
      }
      if (Stack != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Stack);
      }
      if (Pot != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Pot);
      }
      if (MinBetThisRound != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MinBetThisRound);
      }
      if (BetThisRound != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BetThisRound);
      }
      if (BetThisHand != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BetThisHand);
      }
      if (Winnings != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Winnings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerMoney other) {
      if (other == null) {
        return;
      }
      if (other.Bank != 0L) {
        Bank = other.Bank;
      }
      if (other.Stack != 0L) {
        Stack = other.Stack;
      }
      if (other.Pot != 0L) {
        Pot = other.Pot;
      }
      if (other.MinBetThisRound != 0L) {
        MinBetThisRound = other.MinBetThisRound;
      }
      if (other.BetThisRound != 0L) {
        BetThisRound = other.BetThisRound;
      }
      if (other.BetThisHand != 0L) {
        BetThisHand = other.BetThisHand;
      }
      if (other.Winnings != 0L) {
        Winnings = other.Winnings;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 80: {
            Bank = input.ReadInt64();
            break;
          }
          case 160: {
            Stack = input.ReadInt64();
            break;
          }
          case 240: {
            Pot = input.ReadInt64();
            break;
          }
          case 320: {
            MinBetThisRound = input.ReadInt64();
            break;
          }
          case 400: {
            BetThisRound = input.ReadInt64();
            break;
          }
          case 480: {
            BetThisHand = input.ReadInt64();
            break;
          }
          case 560: {
            Winnings = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 80: {
            Bank = input.ReadInt64();
            break;
          }
          case 160: {
            Stack = input.ReadInt64();
            break;
          }
          case 240: {
            Pot = input.ReadInt64();
            break;
          }
          case 320: {
            MinBetThisRound = input.ReadInt64();
            break;
          }
          case 400: {
            BetThisRound = input.ReadInt64();
            break;
          }
          case 480: {
            BetThisHand = input.ReadInt64();
            break;
          }
          case 560: {
            Winnings = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Cards
  /// </summary>
  public sealed partial class CommunityCards : pb::IMessage<CommunityCards>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommunityCards> _parser = new pb::MessageParser<CommunityCards>(() => new CommunityCards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommunityCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityCards(CommunityCards other) : this() {
      card_ = other.card_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityCards Clone() {
      return new CommunityCards(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Poker.Card> _repeated_card_codec
        = pb::FieldCodec.ForMessage(82, global::Poker.Card.Parser);
    private readonly pbc::RepeatedField<global::Poker.Card> card_ = new pbc::RepeatedField<global::Poker.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Poker.Card> Card {
      get { return card_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommunityCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommunityCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!card_.Equals(other.card_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= card_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      card_.WriteTo(output, _repeated_card_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      card_.WriteTo(ref output, _repeated_card_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += card_.CalculateSize(_repeated_card_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommunityCards other) {
      if (other == null) {
        return;
      }
      card_.Add(other.card_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            card_.AddEntriesFrom(input, _repeated_card_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 82: {
            card_.AddEntriesFrom(ref input, _repeated_card_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Card : pb::IMessage<Card>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Poker.PokerReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card(Card other) : this() {
      suite_ = other.suite_;
      rank_ = other.rank_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card Clone() {
      return new Card(this);
    }

    /// <summary>Field number for the "suite" field.</summary>
    public const int SuiteFieldNumber = 10;
    private global::Poker.CardSuit suite_ = global::Poker.CardSuit.Spade;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.CardSuit Suite {
      get { return suite_; }
      set {
        suite_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 20;
    private global::Poker.CardRank rank_ = global::Poker.CardRank.Two;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Poker.CardRank Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Card);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Card other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Suite != other.Suite) return false;
      if (Rank != other.Rank) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Suite != global::Poker.CardSuit.Spade) hash ^= Suite.GetHashCode();
      if (Rank != global::Poker.CardRank.Two) hash ^= Rank.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Suite != global::Poker.CardSuit.Spade) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Suite);
      }
      if (Rank != global::Poker.CardRank.Two) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) Rank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Suite != global::Poker.CardSuit.Spade) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Suite);
      }
      if (Rank != global::Poker.CardRank.Two) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) Rank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Suite != global::Poker.CardSuit.Spade) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Suite);
      }
      if (Rank != global::Poker.CardRank.Two) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Rank);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Card other) {
      if (other == null) {
        return;
      }
      if (other.Suite != global::Poker.CardSuit.Spade) {
        Suite = other.Suite;
      }
      if (other.Rank != global::Poker.CardRank.Two) {
        Rank = other.Rank;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 80: {
            Suite = (global::Poker.CardSuit) input.ReadEnum();
            break;
          }
          case 160: {
            Rank = (global::Poker.CardRank) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 80: {
            Suite = (global::Poker.CardSuit) input.ReadEnum();
            break;
          }
          case 160: {
            Rank = (global::Poker.CardRank) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
